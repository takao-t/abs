;############
;外線着信処理
;############
;ユーザ定義の外線着信処理を記述する場合にはこのファイルへ

;ひかり電話HGW用前処理
[from-hikari-hgw]
exten => s,1,NoOp(ひかり電話HGW着番処理)
;SIP_HEADDERで取得できる場合はchan_sip
exten => s,n,Set(DESTNUM=${SIP_HEADER(To)})
exten => s,n,GotoIf($["${DESTNUM:1:1}"!=""]?intcheck)
;chan_sipではない場合にはPJSIPで取得
exten => s,n,Set(DESTNUM=${PJSIP_HEADER(read,To)})
exten => s,n(intcheck),NoOp(内線チェック)
exten => s,n,GotoIf($["${DESTNUM:1:1}" = "1"]?inter)
exten => s,n,GotoIf($["${DESTNUM:1:1}" = "2"]?inter)
exten => s,n,GotoIf($["${DESTNUM:1:1}" = "3"]?inter)
exten => s,n,GotoIf($["${DESTNUM:1:1}" = "4"]?inter)
exten => s,n,GotoIf($["${DESTNUM:1:1}" = "5"]?inter)
exten => s,n,GotoIf($["${DESTNUM:1:1}" = "6"]?inter)
exten => s,n,GotoIf($["${DESTNUM:1:1}" = "7"]?inter)
exten => s,n,NoOp(外線着信To: ${DESTNUM})
;着信番号の桁数が異なる場合には以下の行を調整のこと
exten => s,n,Set(DESTNUM=${DESTNUM:1:10})
exten => s,n,NoOp(着信番号: ${DESTNUM})
exten => s,n,Goto(incoming,${DESTNUM},1)
;内線着信処理
exten => s,n(inter),NoOp(ひかり電話HGW内線着信)
;内線着信処理用プレフィクス取得
exten => s,n,Set(PFX=${DB(ABS/INT/PFX)})
exten => s,n,Goto(incoming,${PFX}${DESTNUM:1:1},1)

;ひかり電話OG/VG用前処理
[from-hikari-og]
exten => s,1,NoOp(ひかり電話OG/VG着番処理)
exten => s,n,Set(DESTNUM=${SIP_HEADER(To)})
exten => s,n,GotoIf($["${DESTNUM:1:1}"!=""]?skippj)
;chan_sipではない場合にはPJSIPで取得
exten => s,n,Set(DESTNUM=${PJSIP_HEADER(read,To)})
exten => s,n(skippj),NoOp(外線着信To: ${DESTNUM})
;10桁以外で着信する場合には修正必要
exten => s,n,Set(DESTNUM=${DESTNUM:5:10})
exten => s,n,Goto(incoming,${DESTNUM},1)

;ひかり電話OGW前処理2
[from-hikari-ogw]
exten => s,1,NoOp(ひかり電話OG/VG着番処理)
exten => s,n,Set(DESTNUM=${SIP_HEADER(To)})
exten => s,n,GotoIf($["${DESTNUM:1:1}"!=""]?skippj)
;chan_sipではない場合にはPJSIPで取得
exten => s,n,Set(DESTNUM=${PJSIP_HEADER(read,To)})
exten => s,n(skippj),NoOp(外線着信To: ${DESTNUM})
;10桁以外で着信する場合には修正必要
exten => s,n,Set(DESTNUM=${DESTNUM:5:10})
exten => s,n,Goto(incoming,${DESTNUM},1)

;楽天OpenGate着信用前処理
;着番号が050なしで来るため050を付与して着信させる
;Smartも同じ
[from-opengate]
exten => _X.,1,NoOp(OpenGate着信)
exten => _X.,n,Set(DESTNUM=050${EXTEN})
exten => _X.,n,Goto(incoming,${DESTNUM},1)


;#########################################################
;以下は内部処理用なので特に理由のない場合には修正しないこと
;#########################################################
;拠点間内線着信
[intra-incoming]
exten => _X.,1,NoOp(拠点間内線着信)
;一時的なテスト用
exten => _X.,n,NoOp(${CHANNEL})
exten => _X.,n,NoOp(${SIP_HEADER(From)})
;拠点番号桁数を取得
exten => _X.,n,Set(DGT=${DB(ABS/IOP/DIGITS)})
;自拠点宛てかどうかをチェック
exten => _X.,n,Set(HERE=${DB(ABS/IOP/HERE)})
exten => _X.,n,GotoIf($["${HERE}"!="${EXTEN:0:${DGT}}"]?nogo)
;ダイヤル先のピア名を取得
exten => _X.,n,Set(EXT=${EXTEN:${DGT}})
;リモートからのパーク使用の場合
exten => _X.,n,GotoIf($["${EXT:0:3}"="*77"]?remotepark,${EXTEN},1)
exten => _X.,n,Gosub(macro-ext2peer,s,1)
exten => _X.,n,GotoIf($["${PEER}"!=""]?dodial)
;ピア名がなければ終了
exten => _X.,n(nogo),Congestion
;内線へ発信
exten => _X.,n(dodial),NoOp(内線発信)
;CID名を"自分が知っているもの"に置換する
exten => _X.,n,Set(SNU=${CALLERID(num):0:${DGT}})
exten => _X.,n,Set(SNM=${DB(ABS/IOP/${SNU}/NAME)})
exten => _X.,n,Set(CALLERID(name)=${SNM}${CALLERID(num):${DGT}})
;指定がある場合にはプレフィクス付加
exten => _X.,n,GotoIf($["${DB(ABS/APF)}"!="1"]?dialgo)
exten => _X.,n,Set(CALLERID(num)=*0${CALLERID(num)})
exten => _X.,n(dialgo),NoOp
exten => _X.,n,Set(RGPT=${DB(ABS/IOP/RGPT)})
exten => _X.,n,Gosub(macro-rgptcheck,s,1)
;先頭がGならグループ
exten => _X.,n,GotoIf($["${PEER:0:1}"="G"]?intgroup)
;単独内線着信
exten => _X.,n,Gosub(macro-getexttech,s,1)
exten => _X.,n,Dial(${EXTTECH}/${PEER},,xb(macro-setringpattern,${RGPT},1))
exten => _X.,n,Hangup
;内線グループへダイヤル
exten => _X.,n(intgroup),NoOp(内線グループ)
exten => _X.,n,Gosub(macro-groupdial,s,1(${PEER:1}))

;外線着信用コンテキスト
[incoming]

;着信処理
;外線着信(キャッチオール)
exten => _X.,1,NoOp(外線着信)
exten => _X.,n,NoOp(${CALLERID(num)})
exten => _X.,n,NoOp(${CALLERID(name)})
exten => _X.,n,Set(INCIDN=${CALLERID(num)})
exten => _X.,n,Set(INCID=${CALLERID(num)})
;着信番号ログ
exten => _X.,n,System(echo "${STRFTIME(${EPOCH},,%Y/%m/%d-%H:%M:%S)} : INCOMING CALL - ${CALLERID(num)}" >> /var/log/asterisk/call_incoming.log)
exten => _X.,n,System(chmod g+w /var/log/asterisk/call_incoming.log)
;;
;外線着信を変数にセット
exten => _X.,n,Set(THISPOSITION=INBOUND)
;非通知ブロック
exten => _X.,n(anoncheck),NoOp
exten => _X.,n,GotoIf($["${DB(ABS/ANB)}"!="1"]?gtarget)
exten => _X.,n,GotoIf($["${INCID}"="anonymous"]?nokey)
exten => _X.,n,GotoIf($["${INCIDN}"=""]?nokey)
;着番取得
exten => _X.,n(gtarget),Set(TARGET=${EXTEN})
exten => _X.,n,NoOp(着信先番号: ${TARGET})
;DTNを空に
exten => _X.,n,Set(DTN=)
;着信拒否番号チェック
exten => _X.,n,NoOp(着信拒否番号チェック)
exten => _X.,n,Set(RET=${DB(ABS/blacklist/${INCIDN})})
exten => _X.,n,GotoIf($["${RET}"!="1"]?blcont)
;拒否ログチェックと記録
exten => _X.,n,GotoIf($["${DB(ABS/BLC/LOG)}"!="1"]?blj1)
exten => _X.,n,Log(NOTICE,"CALL BLOCKED - ${CALLERID(num)}")
exten => _X.,n,System(echo "${STRFTIME(${EPOCH},,%Y/%m/%d-%H:%M:%S)} : CALL BLOCKED - ${CALLERID(num)}" >> /var/log/asterisk/call_reject.log)
exten => _X.,n,System(chmod g+w /var/log/asterisk/call_reject.log)
;着信拒否時の独自コンテキストチェック
exten => _X.,n(blj1),Set(BLC=${DB(ABS/BLC)})
exten => _X.,n,GotoIf($["${BLC}"!=""]?${BLC},s,1)
exten => _X.,n,Goto(nokey)
exten => _X.,n(blcont),NoOp
;時間外制御チェック(1)ダイヤルインチェック用
exten => _X.,n,NoOp(DI時間外制御チェック)
exten => _X.,n,GotoIf($["${DB(ABS/DID/TCS)}"="1"]?dcheck)
exten => _X.,n,Set(TCC=${DB(ABS/TCC)})
;強制設定されているかどうかチェック
exten => _X.,n,GotoIf($["${TCC}"="3"]?tcaonly,s,1)
exten => _X.,n,GotoIf($["${TCC}"="4"]?tcvm,s,1)
;時刻定義読出し
exten => _X.,n,Set(TSPEC=${DB(ABS/TCSPEC)})
exten => _X.,n,NoOp(時間定義:${TSPEC})
;時間定義が行われていなければ休日チェックへ
exten => _X.,n,GotoIf($["${TSPEC}"=""]?dihlcheck)
;時間定義がある場合には休日チェックへ
exten => _X.,n,GotoIfTime(${TSPEC}?dihlcheck)
exten => _X.,n,GotoIf($["${TCC}"="1"]?tcaonly,s,1)
exten => _X.,n,GotoIf($["${TCC}"="2"]?tcvm,s,1)
;上記条件でなければ祝日・休日チェック
exten => _X.,n(dihlcheck),NoOp
exten => _X.,n,Set(THS=${DB(ABS/DID/THS)})
exten => _X.,n,GotoIf($["${THS}"="1"]?dcheck)
;変数 HOLIDAY に値が入る(なければ通常)
exten => _X.,n,GoSub(macro-CHKHOLIDAY,s,1)
exten => _X.,n,GotoIf($["${HOLIDAY}"=""]?dcheck)
exten => _X.,n,Set(TCHC=${DB(ABS/TCHC)})
exten => _X.,n,GotoIf($["${TCHC}"="1"]?tcaonly,s,1)
exten => _X.,n,GotoIf($["${TCHC}"="2"]?tcvm,s,1)
;条件にあわなければ通常処理


;ダイヤルイン着信チェック
;ダイヤルイン着信の場合にはキー処理させない
exten => _X.,n(dcheck),NoOp(ダイヤルインチェック)
;着信通知外部処理呼出
;キー着信前でhookしておく
exten => _X.,n,GoSub(external-notify,s,1(${INCID}))
;
exten => _X.,n,Set(DIT=${DB(ABS/DID/${TARGET})})
exten => _X.,n,GotoIf($["${DIT}"=""]?checkany)
;ダイヤルイン先内線がある場合には内線のダイヤルイン着信処理へ
exten => _X.,n,NoOp(ダイヤルイン着信 ${TARGET}:${DIT})
exten => _X.,n,Goto(inhouse-did,did-in,1)
;any指定されているかをチェック
exten => _X.,n(checkany),NoOp
exten => _X.,n,Set(DIT=${DB(ABS/DID/any)})
exten => _X.,n,GotoIf($["${DIT}"=""]?tcheck)
;anyでのダイヤルイン先内線がある場合には内線のダイヤルイン着信処理へ
exten => _X.,n,NoOp(ダイヤルイン着信 any:${DIT})
exten => _X.,n,Goto(inhouse-did,did-in,1)
;注意:ダイヤルイン着信はキー処理を迂回する
;any指定がある場合にはキーシステムは使用されない

;時間外制御チェック(2)キーシステム用
exten => _X.,n(tcheck),NoOp(KEY時間外制御チェック)
exten => _X.,n(chktype),Set(TCC=${DB(ABS/TCC)})
;強制設定されているかどうかチェック
exten => _X.,n,GotoIf($["${TCC}"="3"]?tcaonly,s,1)
exten => _X.,n,GotoIf($["${TCC}"="4"]?tcvm,s,1)
;時刻定義読出し
exten => _X.,n,Set(TSPEC=${DB(ABS/TCSPEC)})
exten => _X.,n,NoOp(時間定義:${TSPEC})
;時間定義が行われていなければ休日チェックへ
exten => _x.,n,GotoIf($["${TSPEC}"=""]?khlcheck)
;時間定義がある場合には分岐・休日チェックへ
exten => _x.,n,GotoIfTime(${TSPEC}?khlcheck)
exten => _X.,n,GotoIf($["${TCC}"="1"]?tcaonly,s,1)
exten => _X.,n,GotoIf($["${TCC}"="2"]?tcvm,s,1)
;上記条件でなければ祝日・休日チェック
;変数 HOLIDAY に値が入る(なければ通常)
exten => _X.,n(khlcheck),GoSub(macro-CHKHOLIDAY,s,1)
exten => _X.,n,GotoIf($["${HOLIDAY}"=""]?keycheck)
exten => _X.,n,Set(TCHC=${DB(ABS/TCHC)})
exten => _X.,n,GotoIf($["${TCHC}"="1"]?tcaonly,s,1)
exten => _X.,n,GotoIf($["${TCHC}"="2"]?tcvm,s,1)
;条件にあわなければ通常処理

;着番の着信先キー取得
exten => _X.,n(keycheck),NoOp(キー着信処理)
exten => _X.,n,Set(TGKEY=${DB(ABS/TRUNK/${EXTEN}/KEY)})
;着番に対する着信先キーが存在しない場合はanyチェック
exten => _X.,n,GotoIf($["${TGKEY}"=""]?notrunk)
exten => _X.,n,Goto(key-in,1)
exten => _X.,n(notrunk),NoOp(着番キーなし)

; 'any' が指定されているかをチェック
exten => _X.,n,Set(TGKEY=${DB(ABS/TRUNK/any/KEY)})
; 'any'のキーがなければ着信拒否
exten => _X.,n,GotoIf($["${TGKEY}"=""]?nokey)
; 'any'着信した場合には着信番号がわからないので情報付加
;DSTはCIDnameのLINEx:の後ろに付加される
exten => _X.,n,Set(DTN=${TARGET})
exten => _X.,n,Goto(key-in,1)
exten => _X.,n(nokey),Congestion

exten => key-in,1,NoOp(キー着信処理: 着信先 ${TGKEY})
;開始位置取得
exten => key-in,n,Set(KPSTART=${CUT(TGKEY,-,1)})
exten => key-in,n,Set(KPEND=${CUT(TGKEY,-,2)})
exten => key-in,n,Set(DMSG="IN:${CALLERID(num)}")
exten => key-in,n,Gosub(macro-cidnamecheck,s,1)
;キーコンテキストはkey-auto-commonへ
;KPSTARTに開始位置キー番号が必要
exten => key-in,n,Goto(key-auto-common,s,1)
;[incoming]ここまで
