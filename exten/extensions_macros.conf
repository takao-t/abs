;CID(番号)から名前を取得するマクロ
;AstDBのcidnameに番号と名前を入れておくこと
[macro-cidnamecheck]

exten => s,1,NoOp(CID参照マクロ)
exten => s,n,Set(CIDNAME=${DB(cidname/${CALLERID(num)})})
exten => s,n,GotoIf($["${CIDNAME}" = ""]?noname)
exten => s,n,Set(CALLERID(name)=${CIDNAME})
exten => s,n,Set(CCIDNUM=${CALLERID(num)})
exten => s,n,Set(CCIDNAME=${CIDNAME})
exten => s,n,Goto(endmacro)
exten => s,n(noname),Set(CALLERID(name)=${CALLERID(num)})
exten => s,n,Set(CCIDNUM=${CALLERID(num)})
exten => s,n,Set(CCIDNAME=${CALLERID(name)})
exten => s,n(endmacro),Return

;DBに値が設定されている場合に回線側のCIDを設定するマクロ
;引数ARG1はKIDのこと
[macro-forcecid]
exten => s,1,NoOp(CID強制設定)
exten => s,n,Set(TMPCID=${DB(KEYTEL/KEYSYS${ARG1}/OGCID)})
exten => s,n,GotoIf($["${TMPCID}"=""]?done)
exten => s,n,Set(CALLERID(num)=${TMPCID})
exten => s,n,Set(OGCID=${TMPCID})
exten => s,n(done),Return

;内線テクノロジ取得マクロ
[macro-getexttech]
exten => s,1,NoOp(内線テクノロジ取得)
exten => s,n,NoOp(${PEER})
;PJSIP対応:複数ピアが&で指定された場合は最初のもののみ対象とし
;ABS内部ピア名だけ取り出し
exten => s,n,Set(TPEER=${CUT(PEER,&,1)})
exten => s,n,Set(TPEER=${CUT(TPEER,/,1)})
;デバッグ用(全体で内線テクノロジを混在させるのは推奨しない)
exten => s,n,Set(EXTTECH=${DB(ABS/LOCALTECH/${TPEER})})
exten => s,n,GotoIf($["${EXTTECH}"!=""]?done)
;通常処理
exten => s,n,Set(EXTTECH=${DB(ABS/EXTTECH)})
exten => s,n,GotoIf($["${EXTTECH}"!=""]?done)
exten => s,n,Set(EXTTECH=PJSIP)
exten => s,n(done),Return

;テクノロジにかかわらずピア名取得マクロ
[macro-getpeername]
exten => s,1,NoOp(内線ピア名取得)
exten => s,n,Set(MPEER=${CHANNEL(peername)})
exten => s,n,GotoIf($["${MPEER}"!=""]?doc)
exten => s,n,Set(MPEER=${CHANNEL(endpoint)})
exten => s,n(doc),Return

;内線番号からピア名取得マクロ
;入力: EXT
;返値: PEER
[macro-ext2peer]
exten => s,1,NoOp(内線番号からピア取得)
exten => s,n,Set(PEER=${DB(ABS/EXT/${EXT})})
;G指定されている場合にはグループ
exten => s,n,GotoIf($["${PEER:0:1}"="G"]?done)
;R指定されている場合にはリモート内線
exten => s,n,GotoIf($["${PEER:0:1}"="R"]?done)
;PJSIPの場合のピア取得しなおし
exten => s,n,Gosub(macro-getexttech,s,1)
exten => s,n,GotoIf($["${EXTTECH}"!="PJSIP"]?done)
exten => s,n,Set(PEER=${PJSIP_DIAL_CONTACTS(${PEER},${PEER})})
;返値の先頭テクノロジ部分削除(ABS自体が付けるため)
exten => s,n,Set(PEER=${CUT(PEER,/,2-)})
exten => s,n(done),Return

;ピア名から内線番号取得マクロ
;入力: PEER
;返値: EXT
[macro-peer2ext]
exten => s,1,NoOp(ピア名から内線番号取得)
exten => s,n,Set(EXT=${DB(ABS/ERV/${PEER})})
exten => s,n,Return

;内線登録されていない端末は切断するマクロ
[macro-extcheck]
exten => s,1,NoOp(内線登録確認)
exten => s,n,Gosub(macro-getpeername,s,1)
exten => s,n,Set(EXT=${DB(ABS/ERV/${MPEER})})
exten => s,n,GotoIf($["${EXT}"=""]?nogo)
exten => s,n,Set(PEER=${DB(ABS/EXT/${EXT})})
exten => s,n,GotoIf($["${PEER}"=""]?nogo)
exten => s,n(nochk),Return
;内線登録がない場合には強制切断
exten => s,n(nogo),NoOp(内線登録なしまたはエラー)
exten => s,n(hngext),Hangup

;自端末情報を変数に設定するマクロ
[macro-whoami]
exten => s,1,NoOp(自端末情報取得)
exten => s,n,Gosub(macro-getpeername,s,1)
exten => s,n,Set(ME=${DB(ABS/ERV/${MPEER})})
exten => s,n,Set(OGCID=${DB(ABS/EXT/${ME}/OGCID)})
exten => s,n,Return

;*56系ダイヤルチェック
[macro-d56check]
exten => s,1,NoOp(D56チェック)
exten => s,n,Set(TMP=${DB(ABS/D56)})
exten => s,n,GotoIf($["${TMP}"!="1"]?nogo)
exten => s,n,Return
;*56発信が禁止されている場合には強制切断
exten => s,n(nogo),NoOp(*56発信禁止中)
exten => s,n,Hangup

;規制情報チェック
;引数:要求レベル
[macro-chkrestrict]
;発信規制情報取得
exten => s,1,NoOp(規制情報チェック)
;C2C発信時に規制値チェックしない
exten => s,n,GotoIf($["${C2COUT}"="YESC2C"]?togo)
exten => s,n,Set(TMP=${CHANNEL(peername)})
exten => s,n,GotoIf($["${TMP}"!=""]?doc)
exten => s,n,Set(TMP=${CHANNEL(endpoint)})
exten => s,n(doc),Set(LMT=${DB(ABS/LMT/${TMP})})
exten => s,n,GotoIf($["${LMT}"=""]?nogo)
;規制値でジャンプさせる
exten => s,n,GotoIf($[${LMT} >= ${ARG1}]?togo)
;指定された規制値以外ならダイヤルしない
exten => s,n(nogo),Congestion
;規制値が正当ならマクロ終了
exten => s,n(togo),Return

;アカウントコードチェック
[macro-acccheck]
exten => s,1,NoOp(アカウントコードチェック)
exten => s,n,GotoIf($["${DB(ABS/ACC)}"="1"]?chknxt)
exten => s,n,Return
exten => s,n(chknxt),Set(ACCP=${CDR(accountcode)})
exten => s,n,Set(ACCX=${DB(ABS/ACO)})
exten => s,n,GotoIf($["${ACCP}"!="${ACCX}"]?nogo)
exten => s,n,Return
exten => s,n(nogo),Congestion

;グループダイヤルマクロへのエントリ
[macro-groupdial]
exten => s,1,NoOp(グループ呼び出し GRP=${ARG1} FROM=${ARG2})
;方式取得
exten => s,n,Set(MET=${DB(ABS/GRP/${ARG1}/MET)})
exten => s,n,GotoIf($["${MET}"="RR"]?grr)
exten => s,n,GotoIf($["${MET}"="RM"]?grm)
exten => s,n(gra),Gosub(macro-groupdial-ra,s,1(${ARG1},${ARG2}))
exten => s,n,Hangup
exten => s,n(grr),Gosub(macro-groupdial-rr,s,1(${ARG1},${ARG2}))
exten => s,n,Hangup
exten => s,n(grm),Gosub(macro-groupdial-rm,s,1(${ARG1},${ARG2}))
exten => s,n,Hangup


;グループダイヤル:一斉鳴動
; ARG1: グループ番号
; ARG2: From(内線orキー)
[macro-groupdial-ra]
exten => s,1,NoOp(グループ呼び出し GRP=${ARG1} FROM=${ARG2})
;グループ番号とFROMをセット
exten => s,n,Set(GRP=${ARG1})
exten => s,n,Set(FROM=${ARG2})
;DBからグループ内の内線リストを取得
exten => s,n,Set(GLST=${DB(ABS/GRP/${GRP})})
;空なら何もしない
exten => s,n,GotoIf($["${GLST}"=""]?donothing)
;内線テクノロジ取得
exten => s,n,Gosub(macro-getexttech,s,1)
;内線リストからピアのリスト組み立て
exten => s,n,Set(i=1)
exten => s,n,Set(TGT="")
exten => s,n,While($[${i}<32])
exten => s,n,Set(TMP=${CUT(GLST,\,,${i})})
exten => s,n,GotoIf($["${TMP}"=""]?dodial)
exten => s,n,Set(EXT=${TMP})
exten => s,n,Gosub(macro-ext2peer,s,1)
exten => s,n,GotoIf($["${PEER}"=""]?trynxt)
;割り込みオーバライドが設定されている場合にはピアの話中をチェックしない
exten => s,n,GotoIf($["${DB(ABS/GRP/${GRP}/OVR)}"="1"]?addp)
;該当ピアが使用中のチャネルを持つ場合には対象に入れない
exten => s,n,GotoIf($["${CHANNELS(${EXTTECH}/${PEER}-*)}"!=""]?trynxt)
exten => s,n(addp),Set(TGT=${TGT}&${EXTTECH}/${PEER})
exten => s,n(trynxt),Set(i=$[${i}+1])
exten => s,n,EndWhile
;リスト整形
exten => s,n(dodial),Set(TGT=${TGT:3})
;ダイヤル先がまったくない場合の処理
exten => s,n,GotoIf($["${TGT}"=""]?dobusy)
;ダイヤルオプション取得
exten => s,n,Set(OPT=${DB(ABS/GRP/OPT)})
;タイムアウト取得
exten => s,n,Set(TMO=${DB(ABS/GRP/TMO)})
;キーシステムかどうかを判別
exten => s,n(doagain),GotoIf($["${FROM}"=""]?notkeysys)
exten => s,n,GotoIf($["${FROM}"="0"]?notkeysys)
;キーシステムでの着信ならマクロ実行
exten => s,n,Dial(${TGT},${TMO},U(macro-markme^${FROM})x${OPT}))
;ダイヤル結果によってループ待機
exten => s,n,GotoIf($["${DB(ABS/GRP/${GRP}/BNL)}"!="1"]?dobusy)
exten => s,n,GotoIf($["${DIALSTATUS}"="BUSY"]?waitloop)
exten => s,n,GotoIf($["${DIALSTATUS}"="NOANSWER"]?waitloop)
exten => s,n,GotoIf($["${DIALSTATUS}"="CHANUNAVAIL"]?waitloop)
exten => s,n,Goto(dobusy)
;キーシステムではない着信ならキーマクロなし
exten => s,n(notkeysys),Dial(${TGT},${TMO},x${OPT})
;ダイヤル結果によってループ待機
exten => s,n,GotoIf($["${DB(ABS/GRP/${GRP}/BNL)}"!="1"]?dobusy)
exten => s,n,GotoIf($["${DIALSTATUS}"="BUSY"]?waitloop)
exten => s,n,GotoIf($["${DIALSTATUS}"="NOANSWER"]?waitloop)
exten => s,n,GotoIf($["${DIALSTATUS}"="CHANUNAVAIL"]?waitloop)
exten => s,n,Goto(donothing)
exten => s,n(dobusy),Busy
exten => s,n(donothing),Return
;グループ一斉鳴動時の待機ループ有時の処理
exten => s,n(waitloop),NoOp(一斉鳴動待機ループ)
;待機時間取得
exten => s,n,Set(BTO=${DB(ABS/GRP/${GRP}/BNT)})
exten => s,n,GotoIf($["${BTO}"!=""]?doring)
exten => s,n,Set(BTO=3)
exten => s,n(doring),Ringing()
exten => s,n,Wait(${BTO})
exten => s,n,Goto(doagain)

;グループダイヤル:順次鳴動
; ARG1: グループ番号
; ARG2: From(内線orキー)
[macro-groupdial-rr]
exten => s,1,NoOp(グループ呼び出し GRP=${ARG1} FROM=${ARG2})
;グループ番号とFROMをセット
exten => s,n,Set(GRP=${ARG1})
exten => s,n,Set(FROM=${ARG2})
;DBからグループ内の内線リストを取得
exten => s,n,Set(GLST=${DB(ABS/GRP/${GRP})})
;空なら何もしない
exten => s,n,GotoIf($["${GLST}"=""]?donothing)
;タイムアウト取得
exten => s,n,Set(TMO=${DB(ABS/GRP/${ARG1}/TMO)})
exten => s,n,GotoIf($["${TMO}"!=""]?doagain)
exten => s,n,Set(TMO=20)
;ループ初期値
exten => s,n(doagain),NoOp
exten => s,n,Set(i=1)
exten => s,n,Set(RNUM=0)
;内線テクノロジ取得
exten => s,n,Gosub(macro-getexttech,s,1)
;ここから処理ループ
exten => s,n,While($[${i}<32])
exten => s,n,Set(EXT=${CUT(GLST,\,,${i})})
exten => s,n,GotoIf($["${EXT}"!=""]?gpeer)
;このサイクルでダイヤルした相手がゼロなら5秒待機
exten => s,n,GotoIf($["${RNUM}"!="0"]?doagain)
exten => s,n,Wait(5)
exten => s,n,Goto(doagain)
;ダイヤル処理へ
exten => s,n(gpeer),Gosub(macro-ext2peer,s,1)
exten => s,n,GotoIf($["${PEER}"=""]?trynxt)
;割り込みオーバライドが設定されている場合にはピアの話中をチェックしない
exten => s,n,GotoIf($["${DB(ABS/GRP/OVR)}"="1"]?addp)
;該当ピアが使用中のチャネルを持つ場合には呼ばない
exten => s,n,GotoIf($["${CHANNELS(${EXTTECH}/${PEER}-*)}"!=""]?trynxt)
;ダイヤルオプション取得
exten => s,n(addp),Set(OPT=${DB(ABS/GRP/OPT)})
;キーシステムかどうかを判別
exten => s,n,GotoIf($["${FROM}"=""]?dodial)
exten => s,n,GotoIf($["${FROM}"="0"]?dodial)
;キーシステムでの着信ならマクロ設定
exten => s,n,Set(KMACRO=U(macro-markme^${FROM}))
exten => s,n(dodial),NoOp
exten => s,n,Gosub(macro-getexttech,s,1)
exten => s,n,Dial(${EXTTECH}/${PEER},${TMO},x${OPT}${KMACRO})
exten => s,n,Set(RNUM=$[${RNUM}+1])
exten => s,n(trynxt),Set(i=$[${i}+1])
exten => s,n,EndWhile
exten => s,n(donothing),Return


;グループダイヤル:順次鳴動メモリあり
; ARG1: グループ番号
; ARG2: From(内線orキー)
[macro-groupdial-rm]
exten => s,1,NoOp(グループ呼び出し GRP=${ARG1} FROM=${ARG2})
;グループ番号とFROMをセット
exten => s,n,Set(GRP=${ARG1})
exten => s,n,Set(FROM=${ARG2})
;DBからグループ内の内線リストを取得
exten => s,n,Set(GLST=${DB(ABS/GRP/${GRP})})
;空なら何もしない
exten => s,n,GotoIf($["${GLST}"=""]?donothing)
;タイムアウト取得
exten => s,n,Set(TMO=${DB(ABS/GRP/${ARG1}/TMO)})
exten => s,n,GotoIf($["${TMO}"!=""]?chknn)
exten => s,n,Set(TMO=20)
;前回コール位置をDBから取得
exten => s,n(chknn),Set(i=${DB(ABS/GRP/${GRP}/LAST)})
exten => s,n,GotoIf($["${i}"!=""]?rment)
exten => s,n,Goto(doagain)
exten => s,n,Goto(rment)

;ループ初期値
exten => s,n(doagain),NoOp
exten => s,n,Set(i=1)
;前回コール位置からの再開はここへジャンプ
exten => s,n(rment),Set(RNUM=0)
;内線テクノロジ取得
exten => s,n,Gosub(macro-getexttech,s,1)
;ここから処理ループ
exten => s,n,While($[${i}<32])
exten => s,n,Set(EXT=${CUT(GLST,\,,${i})})
exten => s,n,GotoIf($["${EXT}"!=""]?gpeer)
;このサイクルでダイヤルした相手がゼロなら5秒待機
exten => s,n,GotoIf($["${RNUM}"!="0"]?doagain)
exten => s,n,Wait(5)
exten => s,n,Goto(doagain)
;ダイヤル処理へ
exten => s,n(gpeer),Gosub(macro-ext2peer,s,1)
exten => s,n,GotoIf($["${PEER}"=""]?trynxt)
;割り込みオーバライドが設定されている場合にはピアの話中をチェックしない
exten => s,n,GotoIf($["${DB(ABS/GRP/OVR)}"="1"]?addp)
;該当ピアが使用中のチャネルを持つ場合には呼ばない
exten => s,n,GotoIf($["${CHANNELS(${EXTTECH}/${PEER}-*)}"!=""]?trynxt)
;ダイヤルオプション取得
exten => s,n(addp),Set(OPT=${DB(ABS/GRP/OPT)})
;キーシステムかどうかを判別
exten => s,n,GotoIf($["${FROM}"=""]?dodial)
exten => s,n,GotoIf($["${FROM}"="0"]?dodial)
;キーシステムでの着信ならマクロ設定
exten => s,n,Set(KMACRO=U(macro-markme^${FROM}))
exten => s,n(dodial),NoOp
exten => s,n,Set(DB(ABS/GRP/${GRP}/LAST)=$[${i}+1])
exten => s,n,Gosub(macro-getexttech,s,1)
exten => s,n,Dial(${EXTTECH}/${PEER},${TMO},x${OPT}${KMACRO})
exten => s,n,Set(RNUM=$[${RNUM}+1])
exten => s,n(trynxt),Set(i=$[${i}+1])
exten => s,n,EndWhile
exten => s,n(donothing),Return

;AquesTalkPiによる音声合成用マクロ
[macro-AquesTalkPi]
exten => s,1,NoOp(AquesTalkPi)
exten => s,n,Set(ID=${CHANNEL})
exten => s,n,Set(FN=${CUT(ID,/,2)})
exten => s,n,Set(FN=/tmp/${FN})
exten => s,n,Set(CHANNEL(hangup_handler_push)=atp-rm-hdlr,s,1(${FN}));
exten => s,n,System(/usr/lib/asterisk/atp/AquesTalkPi ${ARG1} > ${FN}.wav)
exten => s,n(loop),Playback(${FN})
exten => s,n,GotoIf($["${PLAYBACKSTATUS}"="FAILED"]?endm)
exten => s,n,System(rm -f ${FN}.wav)
exten => s,n(endm),Set(CHANNEL(hangup_handler_pop)=);
exten => s,n,Return

;AquesTalkPi ファイル削除用ハンドラ
[atp-rm-hdlr]
exten => s,1,System(rm -f ${ARG1}.wav)
exten => s,n,Return()

[debug-hdlr]
exten => s,1,DumpChan()
exten => s,n,Return()

;休日判定マクロ
[macro-CHKHOLIDAY]
exten => s,1,NoOp(休日判定)
exten => s,n,Set(HOLIDAY="")
exten => s,n,Set(TODAY=${STRFTIME(,,%Y-%m-%d)})
exten => s,n,Set(WDAY=${STRFTIME(,,%a)})
exten => s,n,Set(HOLIDAY=${DB(HOLIDAYS/JAPAN/${TODAY})})
exten => s,n,GotoIf($["${HOLIDAY}" != ""]?endm)
;曜日チェック
exten => s,n,GotoIf($["${DB(HOLIDAYS/${WDAY})}" = "1"]?swday)
;曜日該当しない
exten => s,n,Goto(endm)
;曜日チェック時は結果に曜日をセット
exten => s,n(swday),Set(HOLIDAY=${WDAY})
;マクロ終了
exten => s,n(endm),NoOp(${HOLIDAY})
exten => s,n,Return

;外部サービス連携(着信通知)
[external-notify]
exten => s,1,NoOp(何もしない)
exten => s,n,Return

;exten => s,1,NoOp(着信通知連携-QPM)
;exten => s,n,NoOp(${ARG1})
;exten => s,n,Set(TMP_CIDNAME=${DB(cidname/${ARG1})})
;exten => s,n,GotoIf($["${TMP_CIDNAME}" = ""]?noname)
;exten => s,n,Goto(do_qpmnc)
;exten => s,n(noname),Set(TMP_CIDNAME="")
;exten => s,n(do_qpmnc),System(sh -x /var/lib/asterisk/qpmnd/qpmnc.sh ${ARG1} ${TMP_CIDNAME})
;exten => s,n,Return

;exten => s,1,NoOp(着信通知連携-slack)
;exten => s,n,NoOp(${ARG1})
;exten => s,n,Set(TMP_CIDNAME=${DB(cidname/${ARG1})})
;exten => s,n,GotoIf($["${TMP_CIDNAME}" = ""]?noname)
;exten => s,n,Goto(do_slack)
;exten => s,n(noname),Set(TMP_CIDNAME=${ARG1})
;exten => s,n(do_slack),System(python3 /var/lib/asterisk/slack-notify.py ${ARG1} ${TMP_CIDNAME})
;exten => s,n,Return

;Experimental
;メッセージングサポート
[msgsender]
exten => s,1,NoOp(メッセージ送信)
exten => s,n,Set(SRCX=${CUT(MESSAGE(from),:,2)})
exten => s,n,Set(PEER=${CUT(SRCX,@,1)})
exten => s,n,Gosub(macro-peer2ext,s,1)
exten => s,n,Set(MFROM=${EXT})
exten => s,n,Set(EXT=${MTARGET})
exten => s,n,Gosub(macro-ext2peer,s,1)
exten => s,n,Gosub(macro-getexttech,s,1)
exten => s,n,Set(EXTTECH=${TOLOWER(${EXTTECH})})
exten => s,n,MessageSend(${EXTTECH}:${PEER},${MFROM})
exten => s,n,Hangup

;着信音選択用マクロ
#include ringpattern_defs.conf
