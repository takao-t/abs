;CID(番号)から名前を取得するマクロ
;AstDBのcidnameに番号と名前を入れておくこと
[macro-cidnamecheck]

exten => s,1,NoOp(CID参照マクロ)
exten => s,n,Set(CIDNAME=${DB(cidname/${CALLERID(num)})})
exten => s,n,GotoIf($["${CIDNAME}" = ""]?noname)
exten => s,n,Set(CALLERID(name)=${CIDNAME})
exten => s,n,Set(CCIDNUM=${CALLERID(num)})
exten => s,n,Set(CCIDNAME=${CIDNAME})
exten => s,n,Goto(endmacro)
exten => s,n(noname),Set(CALLERID(name)=${CALLERID(num)})
exten => s,n,Set(CCIDNUM=${CALLERID(num)})
exten => s,n,Set(CCIDNAME=${CALLERID(name)})
exten => s,n(endmacro),NoOp
exten => s,n,GotoIf($["${DB(ABS/LIC)}"!=""]?skipl)
exten => s,n,Set(CALLERID(name)="NOT-LICENCED")
exten => s,n(skipl),Return

;DBに値が設定されている場合に回線側のCIDを設定するマクロ
;引数ARG1はKIDのこと
[macro-forcecid]
exten => s,1,NoOp(CID強制設定)
exten => s,n,Set(TMPCID=${DB(KEYTEL/KEYSYS${ARG1}/OGCID)})
exten => s,n,GotoIf($["${TMPCID}"=""]?done)
exten => s,n,Set(CALLERID(num)=${TMPCID})
exten => s,n,Set(OGCID=${TMPCID})
exten => s,n(done),Return

;内線テクノロジ取得マクロ
[macro-getexttech]
exten => s,1,NoOp(内線テクノロジ取得)
exten => s,n,NoOp(${PEER})
;ピアが取得できていないケースではデフォルトで復帰(FAPの場合)
exten => s,n,GotoIf($["${PEER}"=""]?dftt)
;PJSIP対応:複数ピアが&で指定された場合は最初のもののみ対象とし
;ABS内部ピア名だけ取り出し
exten => s,n,Set(TPEER=${CUT(PEER,&,1)})
exten => s,n,Set(TPEER=${CUT(TPEER,/,1)})
;1.特殊内線のテクノロジ個別指定
;2.デバッグ用(内線テクノロジを混在させるのは推奨しない)
exten => s,n,Set(EXTTECH=${DB(ABS/LOCALTECH/${TPEER})})
exten => s,n,GotoIf($["${EXTTECH}"!=""]?done)
;通常処理
exten => s,n(dftt),Set(EXTTECH=${DB(ABS/EXTTECH)})
exten => s,n,GotoIf($["${EXTTECH}"!=""]?done)
exten => s,n,Set(EXTTECH=PJSIP)
exten => s,n(done),Return

;テクノロジにかかわらずピア名取得マクロ
[macro-getpeername]
exten => s,1,NoOp(内線ピア名取得)
;ピアのオーバライド設定がある場合にはそれを使用する
exten => s,n,GotoIf($["${PEEROVERRIDE}"!=""]?doc2)
exten => s,n,Set(MPEER=${CHANNEL(endpoint)})
exten => s,n,GotoIf($["${MPEER}"!=""]?doc)
exten => s,n,Set(MPEER=${CHANNEL(peername)})
exten => s,n(doc),Return
exten => s,n(doc2),Set(MPEER=${PEEROVERRIDE})
exten => s,n,Return

;チャンネルタイプ取得マクロ
[macro-getchantype]
exten => s,1,NoOp(チャンネルタイプ取得)
;ピアのオーバライド設定の場合
exten => s,n,GotoIf($["${PEEROVERRIDE}"!=""]?fixt)
exten => s,n,Set(CHANTYPE=${CHANNEL(channeltype)})
exten => s,n,Return
;オーバライドされている場合には内線TECHを使う
exten => s,n(fixt),Set(CHANTYPE=${DB(ABS/EXTTECH)})
exten => s,n,Return

;内線番号からピア名取得マクロ
;入力: EXT
;返値: PEER
[macro-ext2peer]
exten => s,1,NoOp(内線番号からピア取得)
exten => s,n,Set(PEER=${DB(ABS/EXT/${EXT})})
;ピアが取得できない場合は復帰
exten => s,n,GotoIf($["${PEER}"=""]?done)
;G指定されている場合にはグループ
exten => s,n,GotoIf($["${PEER:0:1}"="G"]?done)
;R指定されている場合にはリモート内線
exten => s,n,GotoIf($["${PEER:0:1}"="R"]?done)
;PJSIPの場合のピア取得しなおし
exten => s,n,Gosub(macro-getexttech,s,1)
exten => s,n,GotoIf($["${EXTTECH}"!="PJSIP"]?done)
exten => s,n,Set(PEER=${PJSIP_DIAL_CONTACTS(${PEER},${PEER})})
;返値の先頭テクノロジ部分削除(ABS自体が付けるため)
exten => s,n,Set(PEER=${CUT(PEER,/,2-)})
exten => s,n(done),Return

;ピア名から内線番号取得マクロ
;入力: PEER
;返値: EXT
[macro-peer2ext]
exten => s,1,NoOp(ピア名から内線番号取得)
exten => s,n,Set(EXT=${DB(ABS/ERV/${PEER})})
exten => s,n,Return

;内線登録されていない端末は切断するマクロ
[macro-extcheck]
exten => s,1,NoOp(内線登録確認)
exten => s,n,Gosub(macro-getpeername,s,1)
exten => s,n,Set(EXT=${DB(ABS/ERV/${MPEER})})
exten => s,n,GotoIf($["${EXT}"=""]?nogo)
exten => s,n,Set(PEER=${DB(ABS/EXT/${EXT})})
exten => s,n,GotoIf($["${PEER}"=""]?nogo)
exten => s,n(nochk),Return
;内線登録がない場合には強制切断
exten => s,n(nogo),NoOp(内線登録なしまたはエラー)
exten => s,n(hngext),Hangup

;自端末情報を変数に設定するマクロ
[macro-whoami]
exten => s,1,NoOp(自端末情報取得)
exten => s,n,Gosub(macro-getpeername,s,1)
exten => s,n,Set(ME=${DB(ABS/ERV/${MPEER})})
exten => s,n,Set(OGCID=${DB(ABS/EXT/${ME}/OGCID)})
exten => s,n,Return

;*56系ダイヤルチェック
[macro-d56check]
exten => s,1,NoOp(D56チェック)
exten => s,n,Set(TMP=${DB(ABS/D56)})
exten => s,n,GotoIf($["${TMP}"!="1"]?nogo)
exten => s,n,Return
;*56発信が禁止されている場合には強制切断
exten => s,n(nogo),NoOp(*56発信禁止中)
exten => s,n,Hangup

;規制情報チェック
;引数:要求レベル
[macro-chkrestrict]
;発信規制情報取得
exten => s,1,NoOp(規制情報チェック)
;C2C発信時に規制値チェックしない
exten => s,n,GotoIf($["${C2COUT}"="YESC2C"]?togo)
exten => s,n,GoSub(macro-getpeername,s,1)
exten => s,n,Set(TMP=${MPEER})
exten => s,n,GotoIf($["${TMP}"!=""]?doc)
exten => s,n,Set(TMP=${CHANNEL(endpoint)})
exten => s,n(doc),Set(LMT=${DB(ABS/LMT/${TMP})})
exten => s,n,GotoIf($["${LMT}"=""]?nogo)
;規制値でジャンプさせる
exten => s,n,GotoIf($[${LMT} >= ${ARG1}]?togo)
;指定された規制値以外ならダイヤルしない
exten => s,n(nogo),Congestion
;規制値が正当ならマクロ終了
exten => s,n(togo),Return

;アカウントコードチェック
[macro-acccheck]
exten => s,1,NoOp(アカウントコードチェック)
exten => s,n,GotoIf($["${DB(ABS/ACC)}"="1"]?chknxt)
exten => s,n,Return
exten => s,n(chknxt),Set(ACCP=${CDR(accountcode)})
exten => s,n,Set(ACCX=${DB(ABS/ACO)})
exten => s,n,GotoIf($["${ACCP}"!="${ACCX}"]?nogo)
exten => s,n,Return
exten => s,n(nogo),Congestion

;グループダイヤルマクロへのエントリ
[macro-groupdial]
exten => s,1,NoOp(グループ呼び出し GRP=${ARG1} FROM=${ARG2})
exten => s,n,NoOp(${RGPT})
;方式取得
exten => s,n,Set(MET=${DB(ABS/GRP/${ARG1}/MET)})
exten => s,n,GotoIf($["${MET}"="RR"]?grr)
exten => s,n,GotoIf($["${MET}"="RM"]?grm)
exten => s,n(gra),Gosub(macro-groupdial-ra,s,1(${ARG1},${ARG2}))
exten => s,n,Hangup
exten => s,n(grr),Gosub(macro-groupdial-rr,s,1(${ARG1},${ARG2}))
exten => s,n,Hangup
exten => s,n(grm),Gosub(macro-groupdial-rm,s,1(${ARG1},${ARG2}))
exten => s,n,Hangup


;グループダイヤル:一斉鳴動
; ARG1: グループ番号
; ARG2: From(内線orキー)
[macro-groupdial-ra]
exten => s,1,NoOp(グループ呼び出し GRP=${ARG1} FROM=${ARG2})
;グループ番号とFROMをセット
exten => s,n,Set(GRP=${ARG1})
exten => s,n,Set(FROM=${ARG2})
;DBからグループ内の内線リストを取得
exten => s,n,Set(GLST=${DB(ABS/GRP/${GRP})})
;空なら何もしない
exten => s,n,GotoIf($["${GLST}"=""]?donothing)
;内線テクノロジ取得
exten => s,n,Gosub(macro-getexttech,s,1)
;内線リストからピアのリスト組み立て
exten => s,n,Set(i=1)
exten => s,n,Set(TGT="")
exten => s,n,While($[${i}<32])
exten => s,n,Set(TMP=${CUT(GLST,\,,${i})})
exten => s,n,GotoIf($["${TMP}"=""]?dodial)
exten => s,n,Set(EXT=${TMP})
exten => s,n,Gosub(macro-ext2peer,s,1)
exten => s,n,GotoIf($["${PEER}"=""]?trynxt)
;割り込みオーバライドが設定されている場合にはピアの話中をチェックしない
exten => s,n,GotoIf($["${DB(ABS/GRP/${GRP}/OVR)}"="1"]?addp)
;該当ピアが使用中のチャネルを持つ場合には対象に入れない
exten => s,n,GotoIf($["${CHANNELS(${EXTTECH}/${PEER}-*)}"!=""]?trynxt)
exten => s,n(addp),Set(TGT=${TGT}&${EXTTECH}/${PEER})
exten => s,n(trynxt),Set(i=$[${i}+1])
exten => s,n,EndWhile
;リスト整形
exten => s,n(dodial),Set(TGT=${TGT:3})
;ダイヤル先がまったくない場合の処理
exten => s,n,GotoIf($["${TGT}"=""]?dobusy)
;ダイヤルオプション取得
exten => s,n,Set(OPT=${DB(ABS/GRP/OPT)})
;タイムアウト取得
exten => s,n,Set(TMO=${DB(ABS/GRP/TMO)})
;キーシステムかどうかを判別
exten => s,n(doagain),GotoIf($["${FROM}"=""]?notkeysys)
exten => s,n,GotoIf($["${FROM}"="0"]?notkeysys)
;キーシステムでの着信ならマクロ実行
exten => s,n,Dial(${TGT},${TMO},U(macro-markme^${FROM})b(multi-macros^s^1(selfpark-handler,s,macro-setringpattern,${RGPT}))x${OPT})
;ダイヤル結果によってループ待機
exten => s,n,GotoIf($["${DB(ABS/GRP/${GRP}/BNL)}"!="1"]?dobusy)
exten => s,n,GotoIf($["${DIALSTATUS}"="BUSY"]?waitloop)
exten => s,n,GotoIf($["${DIALSTATUS}"="NOANSWER"]?waitloop)
exten => s,n,GotoIf($["${DIALSTATUS}"="CHANUNAVAIL"]?waitloop)
exten => s,n,Goto(dobusy)
;キーシステムではない着信ならキーマクロなし
exten => s,n(notkeysys),Dial(${TGT},${TMO},b(selfpark-handler^s^1)x${OPT})
;ダイヤル結果によってループ待機
exten => s,n,GotoIf($["${DB(ABS/GRP/${GRP}/BNL)}"!="1"]?dobusy)
exten => s,n,GotoIf($["${DIALSTATUS}"="BUSY"]?waitloop)
exten => s,n,GotoIf($["${DIALSTATUS}"="NOANSWER"]?waitloop)
exten => s,n,GotoIf($["${DIALSTATUS}"="CHANUNAVAIL"]?waitloop)
exten => s,n,Goto(donothing)
exten => s,n(dobusy),Busy
exten => s,n(donothing),Return
;グループ一斉鳴動時の待機ループ有時の処理
exten => s,n(waitloop),NoOp(一斉鳴動待機ループ)
;待機時間取得
exten => s,n,Set(BTO=${DB(ABS/GRP/${GRP}/BNT)})
exten => s,n,GotoIf($["${BTO}"!=""]?doring)
exten => s,n,Set(BTO=3)
exten => s,n(doring),Ringing()
exten => s,n,Wait(${BTO})
exten => s,n,Goto(doagain)

;グループダイヤル:順次鳴動
; ARG1: グループ番号
; ARG2: From(内線orキー)
[macro-groupdial-rr]
exten => s,1,NoOp(グループ呼び出し GRP=${ARG1} FROM=${ARG2})
;グループ番号とFROMをセット
exten => s,n,Set(GRP=${ARG1})
exten => s,n,Set(FROM=${ARG2})
;DBからグループ内の内線リストを取得
exten => s,n,Set(GLST=${DB(ABS/GRP/${GRP})})
;空なら何もしない
exten => s,n,GotoIf($["${GLST}"=""]?donothing)
;タイムアウト取得
exten => s,n,Set(TMO=${DB(ABS/GRP/${ARG1}/TMO)})
exten => s,n,GotoIf($["${TMO}"!=""]?doagain)
exten => s,n,Set(TMO=20)
;ループ初期値
exten => s,n(doagain),NoOp
exten => s,n,Set(i=1)
exten => s,n,Set(RNUM=0)
;内線テクノロジ取得
exten => s,n,Gosub(macro-getexttech,s,1)
;ここから処理ループ
exten => s,n,While($[${i}<32])
exten => s,n,Set(EXT=${CUT(GLST,\,,${i})})
exten => s,n,GotoIf($["${EXT}"!=""]?gpeer)
;このサイクルでダイヤルした相手がゼロなら5秒待機
exten => s,n,GotoIf($["${RNUM}"!="0"]?doagain)
exten => s,n,Wait(5)
exten => s,n,Goto(doagain)
;ダイヤル処理へ
exten => s,n(gpeer),Gosub(macro-ext2peer,s,1)
exten => s,n,GotoIf($["${PEER}"=""]?trynxt)
;割り込みオーバライドが設定されている場合にはピアの話中をチェックしない
exten => s,n,GotoIf($["${DB(ABS/GRP/OVR)}"="1"]?addp)
;該当ピアが使用中のチャネルを持つ場合には呼ばない
exten => s,n,GotoIf($["${CHANNELS(${EXTTECH}/${PEER}-*)}"!=""]?trynxt)
;ダイヤルオプション取得
exten => s,n(addp),Set(OPT=${DB(ABS/GRP/OPT)})
;キーシステムかどうかを判別
exten => s,n,GotoIf($["${FROM}"=""]?dodial)
exten => s,n,GotoIf($["${FROM}"="0"]?dodial)
;キーシステムでの着信ならマクロ設定
exten => s,n,Set(KMACRO=U(macro-markme^${FROM}))
exten => s,n(dodial),NoOp
exten => s,n,Gosub(macro-getexttech,s,1)
exten => s,n,Dial(${EXTTECH}/${PEER},${TMO},b(macro-setringpattern,${RGPT},1)x${OPT}${KMACRO})
exten => s,n,Set(RNUM=$[${RNUM}+1])
exten => s,n(trynxt),Set(i=$[${i}+1])
exten => s,n,EndWhile
exten => s,n(donothing),Return


;グループダイヤル:順次鳴動メモリあり
; ARG1: グループ番号
; ARG2: From(内線orキー)
[macro-groupdial-rm]
exten => s,1,NoOp(グループ呼び出し GRP=${ARG1} FROM=${ARG2})
;グループ番号とFROMをセット
exten => s,n,Set(GRP=${ARG1})
exten => s,n,Set(FROM=${ARG2})
;DBからグループ内の内線リストを取得
exten => s,n,Set(GLST=${DB(ABS/GRP/${GRP})})
;空なら何もしない
exten => s,n,GotoIf($["${GLST}"=""]?donothing)
;タイムアウト取得
exten => s,n,Set(TMO=${DB(ABS/GRP/${ARG1}/TMO)})
exten => s,n,GotoIf($["${TMO}"!=""]?chknn)
exten => s,n,Set(TMO=20)
;前回コール位置をDBから取得
exten => s,n(chknn),Set(i=${DB(ABS/GRP/${GRP}/LAST)})
exten => s,n,GotoIf($["${i}"!=""]?rment)
exten => s,n,Goto(doagain)
exten => s,n,Goto(rment)

;ループ初期値
exten => s,n(doagain),NoOp
exten => s,n,Set(i=1)
;前回コール位置からの再開はここへジャンプ
exten => s,n(rment),Set(RNUM=0)
;内線テクノロジ取得
exten => s,n,Gosub(macro-getexttech,s,1)
;ここから処理ループ
exten => s,n,While($[${i}<32])
exten => s,n,Set(EXT=${CUT(GLST,\,,${i})})
exten => s,n,GotoIf($["${EXT}"!=""]?gpeer)
;このサイクルでダイヤルした相手がゼロなら5秒待機
exten => s,n,GotoIf($["${RNUM}"!="0"]?doagain)
exten => s,n,Wait(5)
exten => s,n,Goto(doagain)
;ダイヤル処理へ
exten => s,n(gpeer),Gosub(macro-ext2peer,s,1)
exten => s,n,GotoIf($["${PEER}"=""]?trynxt)
;割り込みオーバライドが設定されている場合にはピアの話中をチェックしない
exten => s,n,GotoIf($["${DB(ABS/GRP/OVR)}"="1"]?addp)
;該当ピアが使用中のチャネルを持つ場合には呼ばない
exten => s,n,GotoIf($["${CHANNELS(${EXTTECH}/${PEER}-*)}"!=""]?trynxt)
;ダイヤルオプション取得
exten => s,n(addp),Set(OPT=${DB(ABS/GRP/OPT)})
;キーシステムかどうかを判別
exten => s,n,GotoIf($["${FROM}"=""]?dodial)
exten => s,n,GotoIf($["${FROM}"="0"]?dodial)
;キーシステムでの着信ならマクロ設定
exten => s,n,Set(KMACRO=U(macro-markme^${FROM}))
exten => s,n(dodial),NoOp
exten => s,n,Set(DB(ABS/GRP/${GRP}/LAST)=$[${i}+1])
exten => s,n,Gosub(macro-getexttech,s,1)
exten => s,n,Dial(${EXTTECH}/${PEER},${TMO},b(macro-setringpattern,${RGPT},1)x${OPT}${KMACRO})
exten => s,n,Set(RNUM=$[${RNUM}+1])
exten => s,n(trynxt),Set(i=$[${i}+1])
exten => s,n,EndWhile
exten => s,n(donothing),Return

;AquesTalkPiによる音声合成用マクロ
[macro-AquesTalkPi]
exten => s,1,NoOp(AquesTalkPi)
exten => s,n,Set(ID=${CHANNEL})
exten => s,n,Set(FN=${CUT(ID,/,2)})
exten => s,n,Set(FN=/tmp/${FN})
exten => s,n,Set(CHANNEL(hangup_handler_push)=atp-rm-hdlr,s,1(${FN}));
exten => s,n,System(/usr/lib/asterisk/atp/AquesTalkPi ${ARG1} > ${FN}.wav)
exten => s,n(loop),Playback(${FN})
exten => s,n,GotoIf($["${PLAYBACKSTATUS}"="FAILED"]?endm)
exten => s,n,System(rm -f ${FN}.wav)
exten => s,n(endm),Set(CHANNEL(hangup_handler_pop)=);
exten => s,n,Return

;AquesTalkPi ファイル削除用ハンドラ
[atp-rm-hdlr]
exten => s,1,System(rm -f ${ARG1}.wav)
exten => s,n,Return()

[debug-hdlr]
exten => s,1,DumpChan()
exten => s,n,Return()

;コールパーク時呼び戻し時間取得
[get-parktime]
exten => s,1,NoOp
exten => s,n,Set(CPBT=${DB(ABS/CPBT)})
exten => s,n,GotoIf($["${CPBT}"!=""]?ends)
exten => s,n,Set(CPBT=60)
exten => s,n(ends),Return
;セルフパーク時呼び戻し時間取得
[get-sfptime]
exten => s,1,NoOp
exten => s,n,Set(SPBT=${DB(ABS/SPBT)})
exten => s,n,GotoIf($["${SPBT}"!=""]?ends)
exten => s,n,Set(SPBT=60)
exten => s,n(ends),Return

;休日判定マクロ
[macro-CHKHOLIDAY]
exten => s,1,NoOp(休日判定)
exten => s,n,Set(HOLIDAY="")
exten => s,n,Set(TODAY=${STRFTIME(,,%Y-%m-%d)})
exten => s,n,Set(WDAY=${STRFTIME(,,%a)})
exten => s,n,Set(HOLIDAY=${DB(HOLIDAYS/JAPAN/${TODAY})})
exten => s,n,GotoIf($["${HOLIDAY}" != ""]?endm)
;曜日チェック
exten => s,n,GotoIf($["${DB(HOLIDAYS/${WDAY})}" = "1"]?swday)
;曜日該当しない
exten => s,n,Goto(endm)
;曜日チェック時は結果に曜日をセット
exten => s,n(swday),Set(HOLIDAY=${WDAY})
;マクロ終了
exten => s,n(endm),NoOp(${HOLIDAY})
exten => s,n,Return

;外部サービス連携(着信通知)
[external-notify]
exten => s,1,NoOp(着信通知連携)
exten => s,n,NoOp(${ARG1})
exten => s,n,Set(TMP_CIDNAME=${DB(cidname/${ARG1})})
exten => s,n,GotoIf($["${TMP_CIDNAME}" = ""]?noname)
exten => s,n,Goto(do_qpmnc)
exten => s,n(noname),Set(TMP_CIDNAME="")
exten => s,n(do_qpmnc),System(sh -x /var/lib/asterisk/qpmnd/qpmnc.sh ${ARG1} ${TMP_CIDNAME})
exten => s,n,Return

;Slackサンプルが以下
;exten => s,n,Set(TMP_CIDNAME=${DB(cidname/${ARG1})})
;exten => s,n,GotoIf($["${TMP_CIDNAME}" = ""]?noname)
;exten => s,n,Goto(do_slack)
;exten => s,n(noname),Set(TMP_CIDNAME=${ARG1})
;exten => s,n(do_slack),System(python3 /var/lib/asterisk/slack-notify.py ${ARG1} ${TMP_CIDNAME})
;exten => s,n,Return

;キー外部連携(QPMN)
;ARG1=キー番号
;ARG2=ステート
[extern-devctrl]
exten => s,1,NoOp(キー外部連携)
;exten => s,n,NoOp(${ARG1})
;exten => s,n,NoOp(${ARG2})
;exten => s,n,NoOp(${ARG3})
;exten => s,n,NoOp(${_THISPOSITION})
;exten => s,n,GotoIf($[${ARG2}="RINGING"]?incom)
;exten => s,n,GotoIf($["${ARG3}"=""]?conta)
;exten => s,n,Set(CID=${ARG3})
;exten => s,n,Goto(doexec)
;exten => s,n(conta),GotoIf($["${DESTNUM}"=""]?incom)
;exten => s,n,Set(CID=${DESTNUM})
;exten => s,n,Goto(doexec)
;exten => s,n(incom),Set(CID=${DB(KEYTEL/KEYSYS1/INCID)})
;exten => s,n,GotoIf($["${CID}"!="anonymous"]?doexec)
;exten => s,n,Set(CID="非通知")
;exten => s,n(doexec),NoOp
;exten => s,n,DumpChan()
;exten => s,n,System(sh -x /var/lib/asterisk/qpmnd/qpmk.sh ${ARG2} ${ARG1} ${CID})
exten => s,n,Return

;自己保留(セルフパーク)
[selfpark]
exten => sfp,1,NoOp
exten => sfp,n,GoSub(macro-whoami,s,1)
;exten => sfp,n,DumpChan()
exten => sfp,n,Set(TMPEXT=${CONNECTEDLINE(num)})
exten => sfp,n,GotoIf($["${TMPEXT}"!="s"]?skips)
exten => sfp,n,Set(TMPEXT=)
exten => sfp,n(skips),Set(SFPCPEER=${DB(ABS/EXT/${TMPEXT})})
exten => sfp,n,Set(MTARGET=${TMPEXT})
exten => sfp,n,GotoIf($["${SFPCPEER}"!=""]?dopark)
exten => sfp,n,Set(SFPCPEER=${DB(ABS/ERV/${TMPEXT})})
exten => sfp,n,GotoIf($["${SFPCPEER}"!=""]?doparkp)
exten => sfp,n,Set(SFTMP=${BLINDTRANSFER})
exten => sfp,n,Set(SFTMP=${CUT(SFTMP,/,2)})
exten => sfp,n,Set(SFTMP=${CUT(SFTMP,-,1)})
exten => sfp,n,GotoIf($["${SFTMP}"=""]?nogo)
exten => sfp,n,Set(SFPCPEER=${SFTMP})
exten => sfp,n,Set(MTARGET=${SFTMP})
exten => sfp,n,Goto(dopark)
exten => sfp,n(doparkp),NoOp
exten => sfp,n,Set(MTARGET=${TMPEXT})
exten => sfp,n,Set(SFPCPEER=${TMPEXT})
exten => sfp,n(dopark),Set(PARKINGLOT=${SFPCPEER})
exten => sfp,n,GoSub(get-sfptime,s,1)
exten => sfp,n,Park(,st(${SPBT}))
exten => sfp,n(nogo),NoOp()

;セルフパーク用ハンドラ(Dialでコール)
[selfpark-handler]
exten => s,1,NoOp
exten => s,n,Set(DYNAMIC_FEATURES=selfpark)
exten => s,n,Return
;セルフパーク・タイムアウト戻り
[selfptimedout]
exten => s,1,NoOp
exten => s,n,Set(CALLERID(name)=CB:${CALLERID(name)})
exten => s,n,Goto(default,${MTARGET},btrans)
exten => s,n,Hangup

;自局桁数取得
[get-mydigits]
exten => s,1,NoOp(自局桁数取得)
exten => s,n,Set(MDIGI=${DB(ABS/MDIGITS)})
exten => s,n,GotoIf($["${MDIGI}"=""]?setdef)
exten => s,n,Goto(backn)
exten => s,n(setdef),Set(MDIGI=10)
exten => s,n(backn),Return

;複数マクロ実行用
;引数はcontext,extenの順。Priorityは1固定
[multi-macros]
exten => s,1,NoOp(マルチマクロ)
exten => s,n,Set(TMPI=1)
exten => s,n(lp1),Set(TARG=ARG${TMPI})
exten => s,n,Set(TMACRO=${${TARG}})
exten => s,n,GotoIf($["${TMACRO}"=""]?backm)
exten => s,n,Set(TMPI=$[${TMPI}+1])
exten => s,n,Set(TARG=ARG${TMPI})
exten => s,n,Set(TMACAG1=${${TARG}})
exten => s,n,GotoIf($["${TMACAG1}"=""]?backm)
exten => s,n,Gosub(${TMACRO},${TMACAG1},1)
exten => s,n,Set(TMPI=$[${TMPI}+1])
exten => s,n,Goto(lp1)
exten => s,n(backm),Return(0)

;時間外・休日チェック
[tc-check]
;時間外制御チェック
exten => _X.,1,NoOp(時間外制御チェック)
exten => _X.,n,Set(TCC=${DB(ABS/TCC)})
;強制設定されているかどうかチェック
exten => _X.,n,GotoIf($["${TCC}"="3"]?tcaonly,s,1)
exten => _X.,n,GotoIf($["${TCC}"="4"]?tcvm,s,1)
exten => _X.,n,GotoIf($["${TCC}"="6"]?ivrmenu,${EXTEN},1)
;時刻定義読出し
exten => _X.,n,Set(TSPEC=${DB(ABS/TCSPEC)})
exten => _X.,n,NoOp(時間定義:${TSPEC})
;時間定義が行われていなければ休日チェックへ
exten => _X.,n,GotoIf($["${TSPEC}"=""]?hlcheck)
;時間定義がある場合には休日チェックへ
exten => _X.,n,GotoIfTime(${TSPEC}?hlcheck)
exten => _X.,n,GotoIf($["${TCC}"="1"]?tcaonly,s,1)
exten => _X.,n,GotoIf($["${TCC}"="2"]?tcvm,s,1)
exten => _X.,n,GotoIf($["${TCC}"="5"]?ivrmenu,${EXTEN},1)
;上記条件でなければ祝日・休日チェック
exten => _X.,n(hlcheck),NoOp
exten => _X.,n,GotoIf($["${THS}"="1"]?backm)
;変数 HOLIDAY に値が入る(なければ通常)
exten => _X.,n,GoSub(macro-CHKHOLIDAY,s,1)
exten => _X.,n,GotoIf($["${HOLIDAY}"=""]?backm)
exten => _X.,n,Set(TCHC=${DB(ABS/TCHC)})
exten => _X.,n,GotoIf($["${TCHC}"="1"]?tcaonly,s,1)
exten => _X.,n,GotoIf($["${TCHC}"="2"]?tcvm,s,1)
;条件にあわなければ通常処理
exten => _X.,n(backm),Return


;Experimental
;メッセージングサポート
;内線間送信
[msgredir]
exten => s,1,NoOp(メッセージ送信-中継)
exten => s,n,NoOp(${MESSAGE(from)})
;Toの中身取り出し
exten => s,n,Set(TTO=${MESSAGE(to)})
exten => s,n,Set(DSTB=${CUT(TTO,@,2)})
;Fromは内線番号を表示させたいので内線情報取得
exten => s,n,Set(SRCX=${CUT(MESSAGE(from),:,2)})
exten => s,n,Set(PEER=${CUT(SRCX,@,1)})
exten => s,n,Gosub(macro-peer2ext,s,1)
exten => s,n,Set(MFROM=${EXT})
exten => s,n,Set(EXT=${MTARGET})
exten => s,n,Gosub(macro-ext2peer,s,1)
exten => s,n,Gosub(macro-getexttech,s,1)
;MESSAGE(to)を内線番号ではなくピアにセットしなおす
exten => s,n,Set(DSTT=sip:${TPEER}@${DSTB})
exten => s,n,Set(EXTTECH=${TOLOWER(${EXTTECH})})
exten => s,n,MessageSend(${EXTTECH}:${PEER},${MFROM},${DSTT})
exten => s,n,Hangup
;ABSからの一方的送信
;ARG1-target peer ARG2-message body
[sendmsg]
exten => s,1,NoOp(メッセージ送信)
exten => s,n,GotoIf($["${ARG1}"=""]?nodo)
exten => s,n,GotoIf($["${ARG2}"=""]?nodo)
exten => s,n,Set(MESSAGE(body)=${ARG2})
exten => s,n,Set(MYDOMAIN=192.168.254.234)
exten => s,n,Set(MYFROM=ABS-PBX)
exten => s,n,MessageSend(pjsip:${ARG1},${MYFROM},sip:${ARG1}@${MYDOMAIN})
exten => s,n(nodo),Return

;ゴミ箱内線
[trashbin]
exten => s,1,NoOp(ゴミ箱内線処理)
;滞留防止
exten => s,n,Set(TIMEOUT(absolute)=60)
exten => s,n,Set(TMPID=${CHANNEL(LINKEDID)})
exten => s,n,Set(TNUM=${CALLERID(num)})
exten => s,n,Set(TP1=${DB(ABS/EXT/${TNUM})})
;内線登録のある番号はブロック対象としない(あたりまえ)
exten => s,n,GotoIf($["${TP1}"!=""]?nogo)
exten => s,n,Set(TARGET=${DB(ABS/LSTO/${TMPID}/CIDN)})
exten => s,n,GotoIf($["${TARGET}"=""]?nogo)
;
exten => s,n,Set(NOWDT=${STRFTIME(${EPOCH},,%Y-%m-%d/%H:%M:%S)})
exten => s,n,Set(DB(ABS/blocklist/${TARGET})=${NOWDT})
exten => s,n,MusicOnHold(default)
exten => s,n,Hangup
;実行しない場合の切断
exten => s,n(nogo),Hangup
exten => h,1,Hangup
;タイムアウト切断
exten => t,1,Hangup

;一時ストレージ削除ハンドラ
[delsto-afthang]
exten => s,1,NoOp(DELSTO:${ARG1})
exten => s,n,DBdeltree(ABS/LSTO/${ARG1})
exten => s,n,Return

;ログ処理ルーチン
;着信ログなどを別な手段にする場合にはここへ
;現在想定しているのはINCOMINGとBLOCKEDのみ
;書き方はここを参照
; ARG1 = KIND
; ARG2 = 番号
; ARG3 = UNIQUID
[record-log]
exten => s,1,NoOp(ログ:${ARG1})
exten => s,n,GotoIf($["${ARG1}"="INCOMING"]?dolog)
exten => s,n,GotoIf($["${ARG1}"="BLOCKED"]?dolog)
exten => s,n,Goto(backm)
;ログ実行
exten => s,n(dolog),NoOp
exten => s,n,Set(DBF=/var/log/asterisk/abslog.sqlite3)
exten => s,n,Set(SQL="INSERT INTO abslog(KIND,NUMBER,DESTNUM,UNIQID) values('${ARG1}','${ARG2}','${ARG3}','${ARG4}')")
exten => s,n,System(echo ${SQL} | sqlite3 ${DBF} > /dev/null 2>&1 )
;
exten => s,n(backm),Return

[create-logdb]
exten => s,1,NoOp(ログ用DB生成)
exten => s,n,System(/usr/sbin/logrotate -s /var/log/asterisk/logrotate.status /etc/asterisk/scripts/dbrotate.conf > /dev/null 2>&1)
exten => s,n,Set(DBF=/var/log/asterisk/abslog.sqlite3)
exten => s,n,Set(SQL="CREATE TABLE abslog (ID INTEGER PRIMARY KEY AUTOINCREMENT, KIND TEXT, NUMBER TEXT, DESTNUM TEXT, UNIQID TEXT, TIMESTAMP TIMESTAMP DEFAULT (DATETIME('now','localtime')))")
exten => s,n,System(echo ${SQL} | sqlite3 ${DBF} >> /tmp/absrot.log 2>&1 )
exten => s,n,Hangup

;着信音選択用マクロ
#include ringpattern_defs.conf
