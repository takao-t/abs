;######## 初期化用 特番ダイヤルでもいいしCLIから実行してもいい ########
;キー関係DEVSTATE初期化処理
[keysinit]
;channel originate Local/s@keysinit application NoCDR を実行する
exten => s,1,NoCDR()
exten => s,n,Set(i=1)
;キー数を増やす場合は以下に注意
exten => s,n,While($[${i}<17])
exten => s,n,Set(DEVICE_STATE(Custom:KEYSYS${i})=NOT_INUSE)
exten => s,n,Set(i=$[${i}+1])
exten => s,n,EndWhile

;キー着信部
;着信キー自動ハント(SIP等のチャネル用) 若い番号から埋める
;シングルキー、マルチキー共通
;キー自動ハント共通部
[key-auto-common]
exten => s,1,NoOp(着信キーハント)
exten => s,n,GotoIf($["${KPSTART}"=""]?donothing)
exten => s,n,GotoIf($["${KPEND}"!=""]?docalc)
exten => s,n,Set(KPEND=${KPSTART})
exten => s,n(docalc),Set(KPEND=$[${KPEND} + 1])
exten => s,n,Set(i=${KPSTART})
exten => s,n,While($[${i}<${KPEND}])
;無限ループ防止
exten => s,n,GotoIf($[${i} > 32]?donothing)
;キー状態チェック
exten => s,n,GotoIf($["${DEVICE_STATE(Custom:KEYSYS${i})}"="NOT_INUSE"]?slotok,1)
exten => s,n,Set(i=$[${i} +1])
exten => s,n,EndWhile
exten => s,n(donothing),Congestion
;空きスロットあり
exten => slotok,1,Set(KID=${i})
exten => slotok,n,Goto(key-in-common,s,1)

;キー着信共通部
[key-in-common]
exten => s,1,NoOp
exten => s,n,GotoIf($["${CALLERID(name)}"!=""]?lnset)
exten => s,n,Set(CALLERID(name)=${CALLERID(num)})
;キーラベル取得
exten => s,n(lnset),Set(KLBL=${DB(KEYTEL/KEYSYS${KID}/LABEL)})
exten => s,n,Set(CALLERID(name)=${KLBL}${KID}:${DTN}${CALLERID(name)})
exten => s,n,Set(DB(KEYTEL/KEYSYS${KID}/INCID)=${CALLERID(num)})
;
exten => s,n,GotoIf($["${DEVICE_STATE(Custom:KEYSYS${KID})}"="NOT_INUSE"]?ring)
exten => s,n,Busy
exten => s,n,Hangup
;DEVSTATEを鳴動中に
exten => s,n(ring),Set(DEVICE_STATE(Custom:KEYSYS${KID})=RINGING)
;鳴動チャネルを保存
exten => s,n,Set(DB(KEYTEL/KEYSYS${KID}/ID)=${CHANNEL})
;ハングアップ後処理ハンドラ挿入
exten => s,n,Set(CHANNEL(hangup_handler_push)=ch-afthang,s,1(${KID}))
;経路をマーク
exten => s,n,Set(DB(KEYTEL/KEYSYS${KID}/ORIGIN)=INCOMING)
;仮想電話機(Local ringnode)に対してダイヤル
;応答があればhintをINUSEに
exten => s,n,Dial(Local/dummy${KID}@ringnode&Local/kcall${KID}@dialpool,,xU(macro-devschange^${KID}^INUSE))
exten => s,n,NoOp(end)


;######## ここからキー発信部 ########

;発信キー自動ハント(SIP等のチャネル用) 若い番号から埋める
;シングルキー、マルチキー共通
[key-out-auto]
exten => s,1,NoOp(発信キーハント)
exten => s,n,GotoIf($["${KPSTART}"=""]?donothing)
exten => s,n,GotoIf($["${KPEND}"!=""]?docalc)
exten => s,n,Set(KPEND=${KPSTART})
exten => s,n(docalc),Set(KPEND=$[${KPEND} + 1])
exten => s,n,Set(i=${KPSTART})
exten => s,n,While($[${i}<${KPEND}])
;無限ループ防止
exten => s,n,GotoIf($[${i} > 32]?donothing)
;キー状態チェック
exten => s,n,GotoIf($["${DEVICE_STATE(Custom:KEYSYS${i})}"="NOT_INUSE"]?slotok,1)
exten => s,n,Set(i=$[${i} +1])
exten => s,n,EndWhile
exten => s,n(donothing),Congestion
;空きスロットあり
exten => slotok,1,Set(KID=${i})
exten => slotok,n,Goto(key-out-common,s,1)

;キー発信共通部
[key-out-common]
exten => s,1,NoOp
exten => s,n,GotoIf($["${DEVICE_STATE(Custom:KEYSYS${KID})}"="NOT_INUSE"]?outok)
exten => s,n,Congestion
exten => s,n,Hangup

exten => s,n(outok),Set(DEVICE_STATE(Custom:KEYSYS${KID})=INUSE)
exten => s,n,Gosub(macro-markme,s,1(${KID}))
exten => s,n,Set(CHANNEL(hangup_handler_push)=ch-afthang,s,1(${KID}))
;経路をマーク
exten => s,n,Set(DB(KEYTEL/KEYSYS${KID}/ORIGIN)=OUTGOING)
;相手番号情報を設定
exten => s,n,Gosub(macro-cndid,s,1(${KID},${DESTNUM}))
;発信用CIDを強制設定
exten => s,n,Gosub(macro-forcecid,s,1(${KID}))
;発信用トランクのテクノロジとトランク名を取得
exten => s,n,Set(OUTTECH=${DB(KEYTEL/KEYSYS${KID}/TECH)})
exten => s,n,Set(OUTTRUNK=${DB(KEYTEL/KEYSYS${KID}/TRUNK)})
;Dialのオプション等はここで設定すること
exten => s,n,NoOp(外線発信)
exten => s,n,Set(_THISPOSITION=OUTBOUND)
;発信規制情報チェック
exten => s,n,Gosub(macro-chkrestrict,s,1(2))
;発信処理
exten => s,n(dodial),NoOp(外線発信)
exten => s,n,Set(CALLERID(num)=${OGCID})
exten => s,n,Set(CALLERID(name)=${OGCID})
;アカウントコードで最終チェック
exten => s,n,Gosub(macro-acccheck,s,1)
;トランクプレフィクス取得
exten => s,n,Set(TPFX=${DB(ABS/TRUNK/PFX/${OUTTRUNK})})
;ラインキープレフィクス取得
exten => s,n,Set(KPFX=${DB(KEYTEL/KEYSYS${KID}/PFX)})
;回線種別取得
exten => s,n,Set(LTYP=${DB(KEYTEL/KEYSYS${KID}/TYP)})
;exten => s,n,Dial(${OUTTECH}/${TPFX}${DESTNUM}@${OUTTRUNK},${DIALOPT},U(macro-markyou^${KID}))
exten => s,n,Dial(${OUTTECH}/${KPFX}${TPFX}${DESTNUM}@${OUTTRUNK},${DIALOPT},U(macro-markyou^${KID})b(add-ppiheader^addp^1(${OGCID},${LTYP},${OUTTECH})) )
exten => s,n(nogo),Hangup


;######## 以下、各処理用マクロ ########
;着信処理(Dial)後のDEVSTATE書き換え用マクロ
[macro-devschange]
exten => s,1,NoOp
exten => s,n,Set(DEVICE_STATE(Custom:KEYSYS${ARG1})=${ARG2})
;デバッグ用
;exten => s,n,DumpChan()
exten => s,n,Return

;『普通に』着信した場合に自局をマークさせる
[macro-markme]
exten => s,1,NoOp
exten => s,n,Gosub(macro-getpeername,s,1)
exten => s,n,Set(DB(KEYTEL/KEYSYS${ARG1}/PEER)=${CHANNEL(channeltype)}/${MPEER})
;デバッグ
;exten => s,n,DumpChan()
exten => s,n,Return

;外線発信した場合の『相手側』チャネルをマークする
[macro-markyou]
exten => s,1,NoOp
exten => s,n,NoOp(${CHANNEL})
exten => s,n,Set(DB(KEYTEL/KEYSYS${ARG1}/ID)=${CHANNEL})
exten => s,n,Return

;チャンネルハングアップ後処理
[ch-afthang]
exten => s,1,NoOp
;キーがONHOLDかつ発信ならキー押しによる保留なのでハングアップ後に状態を戻さない
exten => s,n,GotoIf($["${DEVICE_STATE(Custom:KEYSYS${KID})}"!="ONHOLD"]?backnu)
exten => s,n,GotoIf($["${DB(KEYTEL/KEYSYS${KID}/ORIGIN)}"!="INCOMING"]?nochg)
;解放されたら未使用に
exten => s,n(backnu),Set(DEVICE_STATE(Custom:KEYSYS${ARG1})=NOT_INUSE)
;解放された後にピア名を無しに
;PBX挙動時に誤ったピアがキーを確保するのを防止
exten => s,n(nochg),Set(DB(KEYTEL/KEYSYS${ARG1}/PEER)=NONE)
exten => s,n(doret),Return

;######## 特殊処理ノード ########
;鳴動や保留の『端』として使用するローカルチャネル
;鳴動ノード
[ringnode]
;1-9スロット用
exten => _dummyX,1,Ringing
exten => _dummyX,n,Wait(10)
exten => _dummyX,n,Goto(1)
;10-16スロット用
exten => _dummy1X,1,Ringing
exten => _dummy1X,n,Wait(10)
exten => _dummy1X,n,Goto(1)

;保留ノード
;仮想内線にダイアルしMOHを聞かせる
;他電話機からはこの仮想内線をピックアップすることで保留解除
[holdnode]
;1-9スロット用
;holdnode内でハングアップ(DISA発信等)した際の後処理用
exten => _holdX,1,Set(CHANNEL(hangup_handler_push)=ch-afthang,s,1(${EXTEN:4:1}))
;コンテキスト内の鳴動する仮想内線にダイヤルするがリングトーンではなく
;保留音を聞かせる
exten => _holdX,n,Dial(Local/r${EXTEN}@holdnode,,m)
;10-16スロット用
;holdnode内でハングアップ(DISA発信等)した際の後処理用
exten => _hold1X,1,Set(CHANNEL(hangup_handler_push)=ch-afthang,s,1(${EXTEN:4:1}))
;コンテキスト内の鳴動する仮想内線にダイヤルするがリングトーンではなく
;保留音を聞かせる
exten => _hold1X,n,Dial(Local/r${EXTEN}@holdnode,,m)

;鳴動のみの仮想内線
;1-9スロット用
exten => _rholdX,1,NoOp
exten => _rholdX,n(holdlp),Ringing
exten => _rholdX,n,Wait(10)
exten => _rholdX,n,Goto(holdlp)
;10-16スロット用
exten => _rhold1X,1,NoOp
exten => _rhold1X,n(holdlp),Ringing
exten => _rhold1X,n,Wait(10)
exten => _rhold1X,n,Goto(holdlp)



;######## 特殊ノードここまで ########

;キーハンドラ
;KIDに設定されたキーの処理を行う
;同時実行されてDEVSTATEが異常になるのを防止するため一度に1ピアしか実行
;できないように排他処理しているので注意(グローバル変数:TRLOCK)
[key-handler]

exten => keyhandle,1,NoOp(${TRLOCK})
;TRLOCKが初期化されていなければ0にセットする
exten => keyhandle,n,GotoIf($["${TRLOCK}"!=""]?chks)
exten => keyhandle,n,Set(TRLOCK=0)
exten => keyhandle,n(chks),GotoIf($["${TRLOCK}"="0"]?kstart)
;ロック状態なら切断
exten => keyhandle,n,Hangup
;ロックされていなければ処理続行
;ロック解除ハンドラを挿入
exten => keyhandle,n(kstart),Set(CHANNEL(hangup_handler_push)=key-unlock,s,1)
exten => keyhandle,n,Set(GLOBAL(TRLOCK)=1)

;hintの状態によって処理分岐
exten => keyhandle,n,Goto(keyhandle-${DEVICE_STATE(Custom:KEYSYS${KID})},1)

;RINGING
;鳴動中にBLFが押された場合の処理
exten => keyhandle-RINGING,1,NoOp
;通話中のピアを自局にセット
exten => keyhandle-RINGING,n,Gosub(macro-getpeername,s,1)
exten => keyhandle-RINGING,n,Set(DB(KEYTEL/KEYSYS${KID}/PEER)=${CHANNEL(channeltype)}/${MPEER})
;ピックアップによりチャネルが成立するがロックは解除する
exten => keyhandle-RINGING,n,Set(GLOBAL(TRLOCK)=0)
exten => keyhandle-RINGING,n,Set(ICID=${DB(KEYTEL/KEYSYS${KID}/INCID)})
;鳴動中のキーをピックアップ
exten => keyhandle-RINGING,n,PickUpChan(Local/dummy${KID}@ringnode)

;INUSE
;通話中にBLFが押された場合の処理
exten => keyhandle-INUSE,1,NoOp(${CHANNEL})
;通話中ピアが自分でなければ保留にしない
exten => keyhandle-INUSE,n,Gosub(macro-getpeername,s,1)
exten => keyhandle-INUSE,n,GotoIf($["${CHANNEL(channeltype)}/${MPEER}"!="${DB(KEYTEL/KEYSYS${KID}/PEER)}"]?notme)
;自ピアが通話中ならばトランク側を保留ノードに送る
exten => keyhandle-INUSE,n,ChannelRedirect(${DB(KEYTEL/KEYSYS${KID}/ID)},holdnode,hold${KID},1)
;保留ノードへ送れない場合には単純に切断へ
exten => keyhandle-INUSE,n,GotoIf($["${CHANNELREDIRECT_STATUS}"!="SUCCESS"]?noredir)
;DEVSTATEを保留状態に変更
exten => keyhandle-INUSE,n,Set(DEVICE_STATE(Custom:KEYSYS${KID})=ONHOLD)
;再度ピアを自分のものに書き直し(この処理要る？？)
exten => keyhandle-INUSE,n,Gosub(macro-getpeername,s,1)
exten => keyhandle-INUSE,n,Set(DB(KEYTEL/KEYSYS${KID}/PEER)=${CHANNEL(channeltype)}/${MPEER)})
;自ピア時の処理は終わり
exten => keyhandle-INUSE,n,Hangup

exten => keyhandle-INUSE,n(notme),NoOp
;もうロック解除して大丈夫なので解除しておく
exten => keyhandle-INUSE,n,Set(GLOBAL(TRLOCK)=0)
;他端末使用中:割り込みPINがあるかチェック
exten => keyhandle-INUSE,n,Set(BPIN=${DB(KEYTEL/KEYSYS${KID}/BPIN)})
exten => keyhandle-INUSE,n,GotoIf($["${BPIN}"!=""]?spychk)
;PINがなければ切断
exten => keyhandle-INUSE,n,Hangup
;通話への割り込み処理
;PINをチェックする
;exten => keyhandle-INUSE,n(spychk),Playback(beep)
exten => keyhandle-INUSE,n(spychk),Answer
exten => keyhandle-INUSE,n,Wait(1)
exten => keyhandle-INUSE,n,Morsecode(S)
exten => keyhandle-INUSE,n,Read(PASSW) ;ChanSpy使わないのならこの行コメントに
exten => keyhandle-INUSE,n,GotoIf($["${PASSW}"="${BPIN}"]?keyhandle-INUSE-1,1) ;ChanSpy使わないのならこの行コメントに
;exten => keyhandle-INUSE,n,Congestion
;PIN照合後に割り込み実行先
exten => keyhandle-INUSE-1,1,NoOp
exten => keyhandle-INUSE-1,n,Playback(beep)
;モニタorバージをチェック
exten => keyhandle-INUSE-1,n,GotoIf($["${DB(KEYTEL/KEYSYS${KID}/MMD)}"="S"]?dospy)
;デフォルトはバージモード
exten => keyhandle-INUSE-1,n,ChanSpy(${DB(KEYTEL/KEYSYS${KID}/PEER)},sSB)
exten => keyhandle-INUSE-1,n,Hangup
;スパイモード
exten => keyhandle-INUSE-1,n(dospy),NoOp
exten => keyhandle-INUSE-1,n,ChanSpy(${DB(KEYTEL/KEYSYS${KID}/PEER)},sS)
exten => keyhandle-INUSE-1,n,Hangup

;ONHOLD
;キー保留中にBLFが押された場合の処理
exten => keyhandle-ONHOLD,1,NoOp
;通話中ピアを自分のものに書き直す
exten => keyhandle-ONHOLD,n,Gosub(macro-getpeername,s,1)
exten => keyhandle-ONHOLD,n,Set(DB(KEYTEL/KEYSYS${KID}/PEER)=${CHANNEL(channeltype)}/${MPEER})
exten => keyhandle-ONHOLD,n,Set(DEVICE_STATE(Custom:KEYSYS${KID})=INUSE)
;ピックアップによりチャネルが成立するがロックは解除する
exten => keyhandle-ONHOLD,n,Set(GLOBAL(TRLOCK)=0)
;保留中のキーをピックアップする
exten => keyhandle-ONHOLD,n,PickUpChan(Local/rhold${KID}@holdnode)

;NOT_INUSE
;未使用時はセカンドトーン発信する
exten => keyhandle-NOT_INUSE,1,NoOp
;該当キーを使用中に
exten => keyhandle-NOT_INUSE,n,Set(DEVICE_STATE(Custom:KEYSYS${KID})=INUSE)
;通話中のピアを自局にセット
exten => keyhandle-NOT_INUSE,n,Gosub(macro-getpeername,s,1)
exten => keyhandle-NOT_INUSE,n,Set(DB(KEYTEL/KEYSYS${KID}/PEER)=${CHANNEL(channeltype)}/${MPEER})
;ロックはここで解除する
exten => keyhandle-NOT_INUSE,n,Set(GLOBAL(TRLOCK)=0)
exten => keyhandle-NOT_INUSE,n,Set(STAT=WASDISA)
;DISAタイムアウト調整
exten => keyhandle-NOT_INUSE,n,Set(TIMEOUT(responce)=20)
exten => keyhandle-NOT_INUSE,n,Set(TIMEOUT(digit)=5)
exten => keyhandle-NOT_INUSE,n,DISA(no-password,keyout)

;切断時例外処理はここへ
exten => h,1,NoOp
;何も実行されずにDISAが終了したら未使用に戻す
exten => h,n,GotoIf($["${STAT}"="WASDISA"]?cleanup,1)
;DISAで何も実行しなかった場合のクリーンナップ
exten => cleanup,1,Set(DEVICE_STATE(Custom:KEYSYS${KID})=NOT_INUSE)
exten => cleanup,n,Set(DB(KEYTEL/KEYSYS${KID}/PEER)=NONE)

;キーハンドラ終了時に排他解除するマクロ
[key-unlock]
;ハンドラ終了でロック解除
exten => s,1,NoOp
exten => s,n,Set(GLOBAL(TRLOCK)=0)
exten => s,n,Return

;DISA発信をマークするマクロ
[macro-mark-disa]
exten => s,1,NoOp
exten => s,n,Set(DB(KEYTEL/KEYSYS${KID}/ORIGIN)=DISA)
exten => s,n,Return

;発信時の"相手"番号を設定するマクロ
;引数ARG1=KID、ARG2は相手先番号
[macro-cndid]
exten => s,1,NoOp(相手情報セット)
exten => s,n,Set(CIDNAME=${DB(cidname/${ARG2})})
exten => s,n,GotoIf($["${CIDNAME}" = ""]?noname)
exten => s,n,Goto(done)
exten => s,n(noname),Set(CIDNAME=${ARG2})
exten => s,n(done),Set(KLBL=${DB(KEYTEL/KEYSYS${ARG1}/LABEL)})
exten => s,n,Set(CONNECTEDLINE(name)=${KLBL}${ARG1}:${CIDNAME})
exten => s,n,Set(CONNECTEDLINE(num)=${ARG2})
exten => s,n,Set(CONNECTEDLINE(name-charset)=utf8)
exten => s,n,Return

;
; extensions.conf用の設定
;
;BOK Hint
;各BLF用のhint
[bok-blfhints]
exten => key1,hint,Custom:KEYSYS1
exten => key2,hint,Custom:KEYSYS2
exten => key3,hint,Custom:KEYSYS3
exten => key4,hint,Custom:KEYSYS4
exten => key5,hint,Custom:KEYSYS5
exten => key6,hint,Custom:KEYSYS6
exten => key7,hint,Custom:KEYSYS7
exten => key8,hint,Custom:KEYSYS8
exten => key9,hint,Custom:KEYSYS9
exten => key10,hint,Custom:KEYSYS10
exten => key11,hint,Custom:KEYSYS11
exten => key12,hint,Custom:KEYSYS12
exten => key13,hint,Custom:KEYSYS13
exten => key14,hint,Custom:KEYSYS14
exten => key15,hint,Custom:KEYSYS15
exten => key16,hint,Custom:KEYSYS16
;BLFに英文字指定できない電話機用の例
exten => *561,hint,Custom:KEYSYS1
exten => *562,hint,Custom:KEYSYS2
exten => *563,hint,Custom:KEYSYS3
exten => *564,hint,Custom:KEYSYS4
exten => *565,hint,Custom:KEYSYS5
exten => *566,hint,Custom:KEYSYS6
exten => *567,hint,Custom:KEYSYS7
exten => *568,hint,Custom:KEYSYS8

[bok-dials]
;キーが押された場合のジャンプ処理
;機種によって鳴動BLFを押すと**を付けるものがあるので注意(BLF Pickup)
;1-9スロット
exten => _key[1-9],1,NoOp(キー処理)
exten => _key[1-9],n,Gosub(macro-extcheck,s,1)
exten => _key[1-9],n,Set(KID=${EXTEN:3:1})
exten => _key[1-9],n,Goto(key-handler,keyhandle,1)
;10-16スロット
exten => _key1[0-6],1,NoOp(キー処理)
exten => _key1[0-6],n,Gosub(macro-extcheck,s,1)
exten => _key1[0-6],n,Set(KID=${EXTEN:3:2})
exten => _key1[0-6],n,Goto(key-handler,keyhandle,1)
;1-9スロット
exten => _**key[1-9],1,NoOp(キー処理)
exten => _**key[1-9],n,Gosub(macro-extcheck,s,1)
exten => _**key[1-9],n,Set(KID=${EXTEN:5:1})
exten => _**key[1-9],n,Goto(key-handler,keyhandle,1)
;10-16スロット
exten => _**key1[0-6],1,NoOp(キー処理)
exten => _**key1[0-6],n,Gosub(macro-extcheck,s,1)
exten => _**key1[0-6],n,Set(KID=${EXTEN:5:12)
exten => _**key1[0-6],n,Goto(key-handler,keyhandle,1)

;Slack対応:トレーリングするスラッシュを無視したい
exten => _key1.,1,Goto(key1,1)
exten => _key2.,1,Goto(key2,1)
exten => _key3.,1,Goto(key3,1)
exten => _key4.,1,Goto(key4,1)
exten => _key5.,1,Goto(key5,1)
exten => _key6.,1,Goto(key6,1)
exten => _key7.,1,Goto(key7,1)
exten => _key8.,1,Goto(key8,1)
exten => _key9.,1,Goto(key9,1)
exten => _key10.,1,Goto(key10,1)
exten => _key11.,1,Goto(key11,1)
exten => _key12.,1,Goto(key12,1)
exten => _key13.,1,Goto(key13,1)
exten => _key14.,1,Goto(key14,1)
exten => _key15.,1,Goto(key15,1)
exten => _key16.,1,Goto(key16,1)

;BLFが使用できない電話機からキー動作させるための番号(561～568)
;1-9スロット
exten => _*56[1-9],1,NoOp(キー代用番号)
exten => _*56[1-9],n,NoOp(${THISPOSITION})
exten => _*56[1-9],n,Gosub(macro-extcheck,s,1)
;キー代用の場合はノーチェックでかまわない
;exten => _*56[1-9],n,Gosub(macro-d56check,s,1)
exten => _*56[1-9],n(t561),Set(KID=${EXTEN:3:1})
exten => _*56[1-9],n,Goto(key-handler,keyhandle,1)
;10-16スロット
exten => _*561[0-6],1,NoOp(キー代用番号)
exten => _*561[0-6],n,Gosub(macro-extcheck,s,1)
;キー代用の場合はノーチェックでかまわない
;exten => _*561[0-6],n,Gosub(macro-d56check,s,1)
exten => _*561[0-6],n(t562),Set(KID=${EXTEN:3:2})
exten => _*561[0-6],n,Goto(key-handler,keyhandle,1)


;*56XXXXでのダイヤル
exten => _*56[1-9].,1,NoOp(キー捕捉発信)
exten => _*56[1-9].,n,Gosub(macro-extcheck,s,1)
exten => _*56[1-9].,n,Gosub(macro-d56check,s,1)
exten => _*56[1-9].,n,Gosub(macro-whoami,s,1)
exten => _*56[1-9].,n,Set(DESTNUM=${EXTEN:4})
exten => _*56[1-9].,n,Set(KID=${EXTEN:3:1})
exten => _*56[1-9].,n,Goto(key-out-common,s,1)

;外線キー自動捕捉(自動スロット)
exten => _*57[1-4].,1,NoOp(キー捕捉発信)
exten => _*57[1-4].,n,Gosub(macro-extcheck,s,1)
exten => _*57[1-4].,n,Gosub(macro-d56check,s,1)
exten => _*57[1-4].,n,Gosub(macro-whoami,s,1)
exten => _*57[1-4].,n,Set(DESTNUM=${EXTEN:4})
exten => _*57[1-4].,n,Set(CTK=${DB(ABS/D57KEY/${EXTEN:3:1})})
exten => _*57[1-4].,n,Set(KPSTART=${CUT(CTK,-,1)})
exten => _*57[1-4].,n,Set(KPEND=${CUT(CTK,-,2)})
exten => _*57[1-4].,n,Goto(key-out-auto,s,1)
exten => _*57[1-4].,n,GotoIf($["${KPSTART}"=""]?nogo)
exten => _*57[1-4].,n,GotoIf($["${KPEND}"=""]?nogo)
exten => _*57[1-4].,n,Goto(key-out-auto,s,1)
exten => _*57[1-4].,n(nogo),Congestion

;キーによる外線捕捉発信
;DISAでここへ入る
[keyout]
exten => _X.,1,NoOp(DISA発信)
;キーを点灯させるのでハングアップ後には状態を戻す処理を入れること
;変数KIDは押されたキーのIDが入る
exten => _X.,n,Set(CHANNEL(hangup_handler_push)=ch-afthang,s,1(${KID}))
;発信規制情報チェック
exten => _X.,n,Gosub(macro-chkrestrict,s,1(2))
;アカウントコードによるチェック
exten => _X.,n,Gosub(macro-acccheck,s,1)
;相手側(トランク側)チャネルをマークする必要があるのでマクロ挿入して発信
exten => _X.,n(dodial),Gosub(macro-mark-disa,s,1)
;発信先のトランク情報取得
exten => _X.,n,Set(OUTTRUNK=${DB(KEYTEL/KEYSYS${KID}/TRUNK)})
exten => _X.,n,Set(OUTTECH=${DB(KEYTEL/KEYSYS${KID}/TECH)})
;発信CID設定
exten => _X.,n,Gosub(macro-whoami,s,1)
;キーのCIDがある場合には上書きする
exten => _X.,n,Set(TMP=${DB(KEYTEL/KEYSYS${KID}/OGCID)})
exten => _X.,n,GotoIf($["${TMP}"=""]?docid)
exten => _X.,n,Set(OGCID=${TMP})
exten => _X.,n(docid),Set(CALLERID(num)=${OGCID})
exten => _X.,n,Set(CALLERID(name)=${OGCID})
;発信処理
exten => _X.,n,NoOp(発信開始)
exten => _X.,n,Set(_THISPOSITION=OUTBOUND)
;相手先CID強制設定
exten => _X.,n,Gosub(macro-cndid,s,1(${KID},${EXTEN}))
;トランクプレフィクス取得
exten => _X.,n,Set(TPFX=${DB(ABS/TRUNK/PFX/${OUTTRUNK})})
;キープレフィクス取得
exten => _X.,n,Set(KPFX=${DB(KEYTEL/KEYSYS${KID}/PFX)})
;回線種別取得
exten => _X.,n,Set(LTYP=${DB(KEYTEL/KEYSYS${KID}/TYP)})
;発信先番号保持
exten => _X.,n,Set(DB(KEYTEL/KEYSYS${KID}/DISANUM)=${EXTEN})
;exten => _X.,n,Dial(${OUTTECH}/${EXTEN}@${OUTTRUNK},,U(macro-markyou^${KID}))
exten => _X.,n,Dial(${OUTTECH}/${KPFX}${TPFX}${EXTEN}@${OUTTRUNK},,XU(macro-markyou^${KID})b(add-ppiheader^addp^1(${OGCID},${LTYP},${OUTTECH})) )
;メモ用に残し。GWによってはこのタイプが必要なケースがある。
;exten => _X.,n,Dial(${OUTTECH}/${OUTTRUNK}/${EXTEN},,U(macro-markyou^${KID})b(add-ppiheader^addp^1(${OGCID},${OUTTECH})) )
exten => _X.,n,Hangup
exten => _X.,n(nogo),Congestion

;キーからの着信処理
[dialpool]
;1-9スロット用
exten => _kcall[1-9],1,NoOp(キー着信${EXTEN:5:1})
exten => _kcall[1-9],n,Set(HERE=${EXTEN:5:1})
;指定がある場合にはプレフィクス付加
exten => _kcall[1-9],n,GotoIf($["${DB(ABS/APF)}"!="1"]?skippf)
exten => _kcall[1-9],n,Set(CALLERID(num)=*56${HERE}${CALLERID(num)})
exten => _kcall[1-9],n(skippf),Set(RNG=${DB(KEYTEL/KEYSYS${HERE}/RING)})
;キー毎の着信音パターン設定
exten => _kcall[1-9],n,Set(RGPT=${DB(KEYTEL/KEYSYS${HERE}/RGPT)})
exten => _kcall[1-9],n,Gosub(macro-rgptcheck,s,1)
exten => _kcall[1-9],n,GotoIf($["${RNG:0:1}"!="G"]?extdial)
exten => _kcall[1-9],n,Gosub(macro-groupdial,s,1(${RNG:1},${HERE}))
exten => _kcall[1-9],n,Hangup
exten => _kcall[1-9],n(extdial),NoOp(単独内線着信)
exten => _kcall[1-9],n,NoOp(単独内線着信)
exten => _kcall[1-9],n,Set(EXT=${RNG})
exten => _kcall[1-9],n,Gosub(macro-ext2peer,s,1)
exten => _kcall[1-9],n,GotoIf($["${PEER}"=""]?donothing)
exten => _kcall[1-9],n,Gosub(macro-getexttech,s,1)
exten => _kcall[1-9],n,Dial(${EXTTECH}/${PEER},,b(macro-setringpattern,${RGPT},1))
exten => _kcall[1-9],n(donothing),NoOp
;10-16スロット用
exten => _kcall1[0-6],1,NoOp(キー着信${EXTEN:5:2})
exten => _kcall1[0-6],n,Set(HERE=${EXTEN:5:2})
;指定がある場合にはプレフィクス付加
exten => _kcall1[0-6],n,GotoIf($["${DB(ABS/APF)}"!="1"]?skippf)
exten => _kcall1[0-6],n,Set(CALLERID(num)=*56${HERE}${CALLERID(num)})
exten => _kcall1[0-6],n(skippf),Set(RNG=${DB(KEYTEL/KEYSYS${HERE}/RING)})
;キー毎の着信音パターン設定
exten => _kcall1[0-6],n,Set(RGPT=${DB(KEYTEL/KEYSYS${HERE}/RGPT)})
exten => _kcall1[0-6],n,Gosub(macro-rgptcheck,s,1)
exten => _kcall1[0-6],n,GotoIf($["${RNG:0:1}"!="G"]?extdial)
exten => _kcall1[0-6],n,Gosub(macro-groupdial,s,1,(${RNG:1},${HERE}))
exten => _kcall1[0-6],n,Hangup
exten => _kcall1[0-6],n(extdial),NoOp(単独内線着信)
exten => _kcall1[0-6],n,NoOp(単独内線着信)
exten => _kcall1[0-6],n,Set(EXT=${RNG})
exten => _kcall1[0-6],n,Gosub(macro-ext2peer,s,1)
exten => _kcall1[0-6],n,GotoIf($["${PEER}"=""]?donothing)
exten => _kcall1[0-6],n,Gosub(macro-getexttech,s,1)
exten => _kcall1[0-6],n,Dial(${EXTTECH}/${PEER},,b(macro-setringpattern,${RGPT},1))
exten => _kcall1[0-6],n(donothing),NoOp

;PJSIP,SIPで発信時にPPIを設定するためのルーチン(Dialから呼ばれる)
[add-ppiheader]
exten => addp,1,NoOp(SIP-PPI)
exten => addp,n,GotoIf($["${ARG2}"=""]?noadd)
exten => addp,n,Set(AREA=${DB(ABS/${ARG2}/AREA)})
exten => addp,n,GotoIf($["${ARG3}"="PJSIP"]?ispjsip)
exten => addp,n,SIPAddHeader(P-Preferred-Identity:<sip:${ARG1}@${AREA}>)
exten => addp,n,Return
exten => addp,n(ispjsip),Set(PJSIP_HEADER(add,P-Preferred-Identity)=<sip:${ARG1}@${AREA}>)
exten => addp,n(noadd),Return
