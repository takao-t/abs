;
; 内線発着
;

;テストで適当な番号を振りたい場合にはここに書く
;includeすると他に負けるので、ここに書くこと
exten => 8765,1,Gosub(macro-AquesTalkPi,s,1(明日の天気は晴れ)
exten => 8765,n,MusicOnHold
exten => 8765,n,Hangup
;
;特殊ノード(Local Ring)
exten => localring,1,NoOp(localring)
exten => localring,n(lp1),Ringing()
exten => localring,n,Wait(10)
exten => localring,n,Goto(lp1)
;
exten => _X.,1,NoOp(内線発信部)
; Experimental Start
;メッセージングサポート
exten => _X.,n,Set(MTARGET=${EXTEN})
exten => _X.,n,GotoIf($["${CHANNEL(name)}"="Message/ast_msg_queue"]?msgsender,s,1)
; Experimental End
;外線からのブラインド転送チェック(ピア名が内線発にならないケース)
;転送でなければ内線処理へ
exten => _X.,n,GotoIf($["${SIPTRANSFER}"!="yes"]?echk)
;外線からの転送なら発信処理へ
exten => _X.,n,NoOp(${THISPOSITION})
;exten => _X.,n,DumpChan
;外線着信からのブラインド転送
exten => _X.,n,GotoIf($["${THISPOSITION}"="INBOUND"]?btrans)
;外線へ発信した場合でもブラインド転送の場合は発信処理へ
exten => _X.,n,GotoIf($["${THISPOSITION}"="OUTBOUND"]?btrans)
;TBD:外線発着信を外線へ転送可能にさせるか？
;チャネル数を消費するので実装しない方が良いかも
;
;内線チェック
exten => _X.,n(echk),Gosub(macro-extcheck,s,1)
;自ピア名からCID設定
exten => _X.,n,Set(PEER=${CHANNEL(peername)})
exten => _X.,n,GotoIf($["${PEER}"!=""]?doc)
exten => _X.,n,Set(PEER=${CHANNEL(endpoint)})
exten => _X.,n(doc),Gosub(macro-peer2ext,s,1)
exten => _X.,n,Set(CALLERID(num)=${EXT})
;CID名がDBに設定されていれば使用
exten => _X.,n,Gosub(macro-cidnamecheck,s,1)
;ダイヤルされた番号が"そのまま"内線に存在するなら内線
exten => _X.,n,Set(TMP=${DB(ABS/EXT/${EXTEN})})
exten => _X.,n,GotoIf($["${TMP}"!=""]?btrans)
;ダイヤル先がプレフィクスかどうかチェック
;プレフィクスに一致する場合には外線発信へ
exten => _X.,n,Set(TMP=${DB(ABS/OGP1)})
exten => _X.,n,GotoIf($["${TMP}"=""]?chk2)
exten => _X.,n,Set(PFLL=${LEN(${TMP})})
exten => _X.,n,Set(PFNN=1)
exten => _X.,n,NoOp("${TMP}"="${EXTEN:0:${PFLL}}")
exten => _X.,n,GotoIf($["${TMP}"="${EXTEN:0:${PFLL}}"]?prefixout,${EXTEN},1)
exten => _X.,n(chk2),Set(TMP=${DB(ABS/OGP2)})
exten => _X.,n,GotoIf($["${TMP}"=""]?inter)
exten => _X.,n,Set(PFLL=${LEN(${TMP})})
exten => _X.,n,Set(PFNN=2)
exten => _X.,n,NoOp("${TMP}"="${EXTEN:0:${PFLL}}")
exten => _X.,n,GotoIf($["${TMP}"="${EXTEN:0:${PFLL}}"]?prefixout,${EXTEN},1)
;先頭がプレフィクスに一致しなければ内線
;外線ブラインド転送時の飛び先
exten => _X.,n(btrans),NoOp(外線を転送)
;ダイヤル先のピア名を取得
exten => _X.,n(inter),Set(EXT=${EXTEN})
exten => _X.,n,Gosub(macro-ext2peer,s,1)
;exten => _X.,n,DumpChan
exten => _X.,n,GotoIf($["${PEER}"!=""]?chkgrp)
;ピア名がなければ終了
exten => _X.,n,Congestion
;グループかどうかをチェック
exten => _X.,n(chkgrp),GotoIf($["${PEER:0:1}"="G"]?group)
;リモート内線チェック
exten => _X.,n,GotoIf($["${PEER:0:1}"="R"]?rmtext)
;単独内線ダイヤル実行
exten => _X.,n,NoOp(通常内線)
;ダイヤルオプション取得
exten => _X.,n,Set(OPT=${DB(ABS/EXT/OPT)})
;タイムアウト取得
exten => _X.,n,Set(TMO=${DB(ABS/EXT/TMO)})
;着信音パターン選択
;外線からのブラインド転送ならパターン変更しない
exten => _X.,n,GotoIf($["${THISPOSITION}"="INBOUND"]?macrocheck)
exten => _X.,n,Set(RGPT=${DB(ABS/EXT/RGPT)})
;キーシステム使用時に転送された場合にキーのピア書き直しマクロ挿入
exten => _X.,n(macrocheck),Set(DMACRO=)
exten => _X.,n,GotoIf($["${KID}"=""]?dodial)
exten => _X.,n,Set(MPEER=${PEER})
exten => _X.,n,Set(DMACRO=U(macro-markme,${KID}))
;ダイヤル実行
exten => _X.,n(dodial),Gosub(macro-getexttech,s,1)
exten => _X.,n,gosub(macro-rgptcheck,s,1)
exten => _X.,n,Dial(${EXTTECH}/${PEER},${TMO},${DMACRO}${OPT}b(macro-setringpattern,${RGPT},1))
exten => _X.,n,Hangup
;内線グループへダイヤル
exten => _X.,n(group),NoOp(内線グループ)
exten => _X.,n,Gosub(macro-groupdial,s,1(${PEER:1}))
exten => _X.,n,Hangup
;リモート内線ダイヤル
exten => _X.,n(rmtext),NoOp(リモート内線)
exten => _X.,n,Gosub(macro-whoami,s,1)
exten => _X.,n,Goto(intra-out,${PEER:1},1)

;時間外制御表示用
exten => tcc,hint,Custom:TCCOND
exten => *8228,hint,Custom:TCCOND

#include extensions_features.conf
#include extensions_pickup.conf

;ダイヤルイン着信時処理
[inhouse-did]
exten => did-in,1,NoOp(ダイヤルイン着信処理)
exten => did-in,n,Gosub(macro-cidnamecheck,s,1)
exten => did-in,n,Set(CCIDNUM=${CALLERID(num)})
exten => did-in,n,Set(CCIDNAME=${CALLERID(name)})
exten => did-in,n,Set(CALLERID(name)=DI:${CALLERID(name)})
exten => did-in,n,Set(EXT=${DIT})
;対象がグループか単独かをチェック
;頭がGの場合にはグループ着信
exten => did-in,n,NoOp(${EXT:0:1})
exten => did-in,n,GotoIf($["${EXT:0:1}"="G"]?group)
;単独内線への発信処理
;ダイヤル先のピア名を取得
exten => did-in,n,NoOp(ダイヤルイン:単独内線着信)
exten => did-in,n,Gosub(macro-ext2peer,s,1)
exten => did-in,n,GotoIf($["${PEER}"!=""]?dodial)
;ピア名がなければ終了
exten => did-in,n,Congestion
;単独内線でのDIダイヤル
exten => did-in,n(dodial),NoOp(単独内線DI着信)
;ダイヤルオプション取得
exten => did-in,n,Set(OPT=${DB(ABS/DIO/OPT)})
;着信音パターン取得
exten => did-in,n,Set(RGPT=${DB(ABS/DID/RGPT)})
exten => did-in,n,gosub(macro-rgptcheck,s,1)
;タイムアウト取得
exten => did-in,n,Set(TMO=${DB(ABS/DIO/TMO)})
;指定がある場合にはプレフィクス付加
exten => did-in,n,GotoIf($["${DB(ABS/APF)}"!="1"]?pfskip)
exten => did-in,n,Set(OPF=${DB(ABS/OGP1)})
exten => did-in,n,Set(CALLERID(num)=${OPF}${CALLERID(num)})
;ダイヤル実行
exten => did-in,n(pfskip),Gosub(macro-getexttech,s,1)
exten => did-in,n,Dial(${EXTTECH}/${PEER},${TMO},${OPT}b(macro-setringpattern,${RGPT},1))
exten => did-in,n,Hangup
;グループ着信の場合にはマクロ実行
exten => did-in,n(group),NoOp(ダイヤルイン:グループ着信)
exten => did-in,n,Gosub(macro-groupdial,s,1,(${EXT:1}))

;リモートパーク処理
[remotepark]
exten => _X.,1(rempark),NoOp(リモートパーク)
exten => _X.,n,Set(IDIGI=${DB(ABS/IOP/DIGITS)})
;かけてきたリモートの内線が自局内で定義されているかチェックする
exten => _X.,n,Set(RMCEXT=${CALLERID(num):${IDIGI}})
exten => _X.,n,Set(RMOEXT=${DB(ABS/EXT/${RMCEXT})})
exten => _X.,n,GotoIf($["${RMOEXT}"=""]?rnogo)
exten => _X.,n,Set(RMPKOPT=c(rparkreturn,${RMCEXT},1))
exten => _X.,n,Goto(default,${EXT},1)
exten => _X.,n(rnogo),Congestion

[rparkreturn]
;リモートパーク時の呼び戻し処理
exten => _X.,1,NoOp(リモートパーク呼び戻し)
exten => _X.,n,Set(TORET=${DB(ABS/EXT/${EXTEN})})
exten => _X.,n,Set(TORET=${TORET:1})
exten => _X.,n,Goto(intra-out,${TORET},1)

[fax-in]
;ファクス
exten => fax,1,NoOp(ファクス受信)
exten => fax,n,ReceiveFAX(/var/spool/asterisk/test.tiff)
exten => fax,n,NoOp(${FAXOPT(error)})
exten => fax,n,Hangup

;ドアホン着信用
[from-door]
;ドアホンからの着信内線番号は5000固定
exten => 5000,1,NoOp(ドアホン着信)
;着信音パターン選択
exten => 5000,n,Set(RGPT=${DB(ABS/DOOR/RGPT)})
exten => 5000,n,Gosub(macro-setringpattern,s,1)
;着信先グループ番号取得
exten => 5000,n,Set(DGRP=${DB(ABS/DOOR/RING)})
;先頭のGがある場合には削る
exten => 5000,n,GotoIf($["${DGRP:0:1}"!="G"]?gdial)
exten => 5000,n,Set(DGRP=${DGRP:1})
exten => 5000,n(gdial),Gosub(macro-groupdial,s,1(${DGRP}))
